/***********************************************************************/
/*                                                                     */
/*  FILE        :hwsetup.cpp                                           */
/*  DATE        :Wed, Apr 22, 2009                                     */
/*  DESCRIPTION :Hardware Setup file                                   */
/*  CPU TYPE    :SH7216                                                */
/*                                                                     */
/*  This file is generated by Renesas Project Generator (Ver.4.9).     */
/*                                                                     */
/***********************************************************************/
/*
 *    Copyright (C) 2010 Renesas Electronics America Inc. All rights reserved.
 */                  

#include    <machine.h>
#include "../include/iodefine.h"
#ifdef __cplusplus
extern "C" {
#endif
extern void HardwareSetup(void);
#ifdef __cplusplus
}
#endif

/* ==== Macro definition ==== */
/* ---- Address when writing in a SDRAM mode register ---- */
#define SDRAM_MODE      (*(volatile unsigned short *)(0xfffc5440))

#pragma section ResetPRG

void HardwareSetup(void)
{
    volatile int j = 4000;          /* for 200-usec wait count @100MHz */

    /* ==== CPG setting ==== */
    CPG.FRQCR.WORD  = 0x0303;           /* Clock-in = 12.5MHz */
                                        /* I-clock = 200MHz */
                                        /* B-clock = 50MHz */
                                        /* P-clock = 50MHz */
    
//  WDT.WRITE.WTCSR = 0xa51e;       /* WDT stop, WDT count clock setting */
                                    /* 1/4096 x P-clock (50MHz; 20.97msec) */
//  WDT.WRITE.WTCNT = 0x5a85;       /* Counter initial setting 10msec */

    /* ---- Inserting 32 NOP instructions ---- */
    nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop();
    nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop();
    nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop();
    nop(); nop(); nop(); nop(); nop(); nop(); nop(); nop();
    
    CPG.MCLKCR.BIT.MSDIVS = 1;      /* MTU2S = 100MHz */
    CPG.ACLKCR.BIT.ASDIVS = 3;      /* AD    =  50MHz */


    /* ==== Enable module clock ==== */
    STB.CR3.BYTE = 0x02;            /* Module Standby Clear */
                                    /* HIZ,MTU2S,MTU2,POE2,IIC3,ADC0,Reserve(1),FLASH */

    STB.CR4.BYTE = 0xE2;            /* Module Standby Clear */
                                    /* Reserve(1),Reserve(1),Reserve(1),SCIF3,Reserve(0),CMT,Reserve(1),EtherC */

    STB.CR5.BYTE = 0x12;            /* Module Standby Clear */
                                    /* SCI0,SCI1,SCI2,Reserve(1),SCI4,ADC1,Reserve(1),RSPI */
    
    STB.CR6.BYTE = 0x8f;            /* USB: Using USBXTAL/USBEXTAL for USBCLK. */
                                    /* RCAN-ET */                               

    /* ==== Init SDRAM ==== */
    /* ==== PFC settings ==== */

    PFC.PACRH2.BIT.PA21MD = 0x4;    /* Set CKE   */
    
    PFC.PACRH1.BIT.PA18MD = 0x1;    /* Set CK    */
    PFC.PACRH1.BIT.PA16MD = 0x1;    /* Set DQMLL */
    
    PFC.PACRL4.BIT.PA15MD = 0x1;    /* Set DQMLU */
    PFC.PACRL4.BIT.PA14MD = 0x2;    /* Set RASL  */
    PFC.PACRL4.BIT.PA13MD = 0x2;    /* Set CASL  */
    
    PFC.PBCRL3.BIT.PB11MD = 0x2;    /* Set CS3#  */
    
    PFC.PBCRL1.BIT.PB0MD  = 0x2;    /* Set RDWR  */
    
    PFC.PCCRL4.BIT.PC14MD = 0x1;    /* Set A14   */
    PFC.PCCRL4.BIT.PC13MD = 0x1;    /* Set A13   */
    PFC.PCCRL4.BIT.PC12MD = 0x1;    /* Set A12   */
    
    PFC.PCCRL3.WORD = 0x1111;       /* Set A11-A8 */
    PFC.PCCRL2.WORD = 0x1111;       /* Set A7-A4 */
  
    PFC.PCCRL1.BIT.PC3MD = 0x1;     /* Set A3    */
    PFC.PCCRL1.BIT.PC2MD = 0x1;     /* Set A2    */
    PFC.PCCRL1.BIT.PC1MD = 0x1;     /* Set A1    */
    
    PFC.PDCRL4.WORD = 0x1111;       /* Set D15-D12 */
    PFC.PDCRL3.WORD = 0x1111;       /* Set D11-D8 */
    PFC.PDCRL2.WORD = 0x1111;       /* Set D7-D4 */
    PFC.PDCRL1.WORD = 0x1111;       /* Set D3-D0 */

    /* ====  200-usec interval elapsed ? ==== */
    while(j-- > 0){
        /* wait */
    }


    /* ==== CMNCR Setting ==== */
//  BSC.CMNCR.LONG = 0x00001010ul;  /* Initial Value */

    /* ==== CS3BCR Setting ==== */
    BSC.CS3BCR.LONG = 0x00004400ul;
                                    /*  Idle cycles between Raed-Write/Write-Write  *
                                     *  : 1 Idle cycle                              *
                                     *  Memory type: SDRAM                          *
                                     *  Data bus size: 16-bit size                  */

    /* ==== CS3WCR setting ==== */
  /*  BSC.CS3WCR = 0x00006c91ul; */
/* Precharge completion wait cycles:3cycles */
/* Wait cycles between ACTV command and READ/WRIT command :3cycles */
/* CAS latency for area3 :2cycles */
/* Auto-precharge startup wait cycles:2cycles */
/* Idle cycles from REF command/self-refresh relese to ACTV/REF/MRS command :3cycles */

//  BSC.CS3WCR = 0x00002491ul; 
/* Precharge completion wait cycles:1cycle */
/* Wait cycles between ACTV command and READ/WRIT command :1cycle */
/* CAS latency for area3 :2cycles */
/* Auto-precharge startup wait cycles:2cycles */
/* Idle cycles from REF command/self-refresh relese to ACTV/REF/MRS command :3cycles */

    BSC.CS3WCR = 0x00000492ul;    
/* Precharge completion wait cycles:0cycle */
/* Wait cycles between ACTV command and READ/WRIT command :1 cycle */
/* CAS latency for area3 :2cycles */
/* Auto-precharge startup wait cycles:2cycles */
/* Idle cycles from REF command/self-refresh relese to ACTV/REF/MRS command :5cycles */

    /* ==== SDCR setting ==== */
    BSC.SDCR.LONG = 0x00000809ul;
                                    /*  Refresh Control: Refresh            *
                                     *  RMODE: Auto-refresh is performed    *
                                     *  BACTV: Auto-precharge mode          *
                                     *  Row address for Area 3: 12 bits     *
                                     *  Column Address for Area 3: 9 bits   */

    /* ==== RTCOR setting ==== */
    BSC.RTCOR = 0xa55a0030ul;       /*  15.625usec /320nsec = 48(0x30)cycles/refresh  */

    /* ==== RTCSR setting ==== */
    BSC.RTCSR.LONG = 0xa55a0010ul;
                                    /*  Initialize sequence start           *
                                     *  Clock select B-clock/16 = 320nsec   *
                                     *  Refresh count: Once                 */

    /* ==== Written in SDRAM Mode Register ==== */
    SDRAM_MODE = 0;
                                    /*  CS3 area/16bit bus size             *
                                     *  Burst read/Single write             */                                  
                                    
}