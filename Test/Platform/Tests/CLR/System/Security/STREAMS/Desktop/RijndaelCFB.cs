//
//	RijndaelCFB
//		The test compares our RijndaelManaged implementation in its CFB mode against the test values from http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf
//

using System;
using System.Security.Cryptography;
using System.IO;

public class RijndaelCFB
{

public static bool Test()
{
	bool bRes = true;

	byte[] Key = new byte[] {0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c};
	byte[] IV = new byte[] {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f};

	//
	//	128 bit key
	//

	Console.WriteLine("Testing test vectors with 128bit key...");
	byte[] Plain = new byte[] {0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51,0x30,0xc8,0x1c,0x46,0xa3,0x5c,0xe4,0x11,0xe5,0xfb,0xc1,0x19,0x1a,0x0a,0x52,0xef,0xf6,0x9f,0x24,0x45,0xdf,0x4f,0x9b,0x17,0xad,0x2b,0x41,0x7b,0xe6,0x6c,0x37,0x10};
	byte[] Cipher = new byte[] {0x3b,0x3f,0xd9,0x2e,0xb7,0x2d,0xad,0x20,0x33,0x34,0x49,0xf8,0xe8,0x3c,0xfb,0x4a,0xc8,0xa6,0x45,0x37,0xa0,0xb3,0xa9,0x3f,0xcd,0xe3,0xcd,0xad,0x9f,0x1c,0xe5,0x8b,0x26,0x75,0x1f,0x67,0xa3,0xcb,0xb1,0x40,0xb1,0x80,0x8c,0xf1,0x87,0xa4,0xf4,0xdf,0xc0,0x4b,0x05,0x35,0x7c,0x5d,0x1c,0x0e,0xea,0xc4,0xc6,0x6f,0x9f,0xf7,0xf2,0xe6};

	byte[] Encrypted = EncryptCFB(Key, IV, Plain);

	if (!Compare(Cipher, Encrypted)) {
		Console.WriteLine("FAIL: Encrypt pass with 128 bit key results differ!" + Environment.NewLine + "Expected:" + Environment.NewLine +
						BitConverter.ToString(Cipher) + Environment.NewLine +
						"Computed:" + Environment.NewLine + BitConverter.ToString(Encrypted));
		bRes = false;
	}

	byte[] Decrypted = DecryptCFB(Key, IV, Cipher);
	if (!Compare(Plain, Decrypted)) {
		Console.WriteLine("FAIL: Decrypt pass with 128 bit key results differ!" + Environment.NewLine + "Expected:" + Environment.NewLine +
						BitConverter.ToString(Plain) + Environment.NewLine +
						"Computed:" + Environment.NewLine + BitConverter.ToString(Decrypted));
		bRes = false;
	}

	//
	//	192 bit key
	//

	Console.WriteLine("Testing test vectors with 192bit key...");
	Key = new byte[] {0x8e,0x73,0xb0,0xf7,0xda,0x0e,0x64,0x52,0xc8,0x10,0xf3,0x2b,0x80,0x90,0x79,0xe5,0x62,0xf8,0xea,0xd2,0x52,0x2c,0x6b,0x7b};
	Cipher = new byte[] {0xcd,0xc8,0x0d,0x6f,0xdd,0xf1,0x8c,0xab,0x34,0xc2,0x59,0x09,0xc9,0x9a,0x41,0x74,0x67,0xce,0x7f,0x7f,0x81,0x17,0x36,0x21,0x96,0x1a,0x2b,0x70,0x17,0x1d,0x3d,0x7a,0x2e,0x1e,0x8a,0x1d,0xd5,0x9b,0x88,0xb1,0xc8,0xe6,0x0f,0xed,0x1e,0xfa,0xc4,0xc9,0xc0,0x5f,0x9f,0x9c,0xa9,0x83,0x4f,0xa0,0x42,0xae,0x8f,0xba,0x58,0x4b,0x09,0xff};

	Encrypted = EncryptCFB(Key, IV, Plain);

	if (!Compare(Cipher, Encrypted)) {
		Console.WriteLine("FAIL: Encrypt pass with 192 bit key results differ!" + Environment.NewLine + "Expected:" + Environment.NewLine +
						BitConverter.ToString(Cipher) + Environment.NewLine +
						"Computed:" + Environment.NewLine + BitConverter.ToString(Encrypted));
		bRes = false;
	}

	Decrypted = DecryptCFB(Key, IV, Cipher);
	if (!Compare(Plain, Decrypted)) {
		Console.WriteLine("FAIL: Decrypt pass with 192 bit key results differ!" + Environment.NewLine + "Expected:" + Environment.NewLine +
						BitConverter.ToString(Plain) + Environment.NewLine +
						"Computed:" + Environment.NewLine + BitConverter.ToString(Decrypted));
		bRes = false;
	}


	//
	//	256 bit key
	//

	Console.WriteLine("Testing test vectors with 256bit key...");
	Key = new byte[] {0x60,0x3d,0xeb,0x10,0x15,0xca,0x71,0xbe,0x2b,0x73,0xae,0xf0,0x85,0x7d,0x77,0x81,0x1f,0x35,0x2c,0x07,0x3b,0x61,0x08,0xd7,0x2d,0x98,0x10,0xa3,0x09,0x14,0xdf,0xf4};
	Cipher = new byte[] {0xdc,0x7e,0x84,0xbf,0xda,0x79,0x16,0x4b,0x7e,0xcd,0x84,0x86,0x98,0x5d,0x38,0x60,0x39,0xff,0xed,0x14,0x3b,0x28,0xb1,0xc8,0x32,0x11,0x3c,0x63,0x31,0xe5,0x40,0x7b,0xdf,0x10,0x13,0x24,0x15,0xe5,0x4b,0x92,0xa1,0x3e,0xd0,0xa8,0x26,0x7a,0xe2,0xf9,0x75,0xa3,0x85,0x74,0x1a,0xb9,0xce,0xf8,0x20,0x31,0x62,0x3d,0x55,0xb1,0xe4,0x71};

	Encrypted = EncryptCFB(Key, IV, Plain);

	if (!Compare(Cipher, Encrypted)) {
		Console.WriteLine("FAIL: Encrypt pass with 256 bit key results differ!" + Environment.NewLine + "Expected:" + Environment.NewLine +
						BitConverter.ToString(Cipher) + Environment.NewLine +
						"Computed:" + Environment.NewLine + BitConverter.ToString(Encrypted));
		bRes = false;
	}

	Decrypted = DecryptCFB(Key, IV, Cipher);
	if (!Compare(Plain, Decrypted)) {
		Console.WriteLine("FAIL: Decrypt pass with 256 bit key results differ!" + Environment.NewLine + "Expected:" + Environment.NewLine +
						BitConverter.ToString(Plain) + Environment.NewLine +
						"Computed:" + Environment.NewLine + BitConverter.ToString(Decrypted));
		bRes = false;
	}



	return bRes;	
}

static Boolean Compare(Byte[] rgb1, Byte[] rgb2) { 
	int 	i;
	if (rgb1.Length != rgb2.Length) return false;
	for (i=0; i<rgb1.Length; i++) {
		if (rgb1[i] != rgb2[i]) return false;
	}
	return true;
}

public static byte[] EncryptCFB(byte[] Key, byte[] IV, byte[] data)
{
	RijndaelManaged r = new RijndaelManaged();
	r.Mode = CipherMode.CFB;
	r.Padding = PaddingMode.None;
	MemoryStream ms = new MemoryStream();
	CryptoStream cs = new CryptoStream(ms, r.CreateEncryptor(Key, IV), CryptoStreamMode.Write);
	cs.Write(data, 0, data.Length);
	cs.Close();
	return ms.ToArray();
}

public static byte[] DecryptCFB(byte[] Key, byte[] IV, byte[] data)
{
	RijndaelManaged r = new RijndaelManaged();
	r.Mode = CipherMode.CFB;
	r.Padding = PaddingMode.None;
	MemoryStream ms = new MemoryStream();
	CryptoStream cs = new CryptoStream(ms, r.CreateDecryptor(Key, IV), CryptoStreamMode.Write);
	cs.Write(data, 0, data.Length);
	cs.Close();
	return ms.ToArray();
}



public static void Main()
{
	try {
		   
		   if (Test()) {
			   Console.WriteLine("PASSED");
			   Environment.ExitCode = 100;
		   } else {
			   Console.WriteLine("FAILED");
			   Environment.ExitCode = 101;
		   }
	
	   }
	   catch(Exception e) {
		   Console.WriteLine();
		   Console.Write("Exception: {0}", e.ToString());
		   Environment.ExitCode = 101;
	   }

}



}
