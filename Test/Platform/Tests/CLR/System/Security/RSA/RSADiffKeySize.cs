using System;
using System.Security.Cryptography;
using Microsoft.SPOT.Cryptoki;
using Microsoft.SPOT.Platform.Test;


// This test verifies that when RSA key's size is 512, 1024, 2048 or 1536, we can import the keys and VerifyHash.
// RSATestData1024, RSATestData2048 and other data blobs are generated by RsaTEstGenerator which is checked into tools directory.

namespace Microsoft.SPOT.Platform.Tests
{
    public class RSADiffKeySize : IMFTestInterface
    {
        bool m_isEmulator;

        [SetUp]
        public InitializeResult Initialize()
        {
            Log.Comment("Adding set up for the tests.");

            // Add your functionality here.                
            try
            {
                m_isEmulator = (Microsoft.SPOT.Hardware.SystemInfo.SystemID.SKU == 3);
            }
            catch
            {
                return InitializeResult.Skip;
            }

            return InitializeResult.ReadyToGo;
        }

        [TearDown]
        public void CleanUp()
        {
        }

        [TestMethod]
        public MFTestResults RSADiffKeySize_Test()
        {
            bool bRes = true;

            try
            {
                using (Session sess = new Session("", MechanismType.RSA_PKCS))
                {
                    bRes &= Test(sess);
                }

                if (m_isEmulator)
                {
                    using (Session sess = new Session("Emulator_Crypto", MechanismType.RSA_PKCS))
                    {
                        bRes &= Test(sess);
                    }
                }
            }
            catch (Exception e)
            {
                Log.Exception("", e);
                bRes = false;
            }
            return bRes ? MFTestResults.Pass : MFTestResults.Fail;
        }

        public static bool Test(Session session)
        {
            bool bRet = true;
            try
            {
                RSAParameters key = new RSAParameters();
                key.Exponent = RSATestData1024.GetExponent();
                key.Modulus = RSATestData1024.GetModulus();

                using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider(session))
                {
                    Log.Comment("Importing the RSA key size of 1024");
                    rsa.ImportParameters(key);

                    Log.Comment("Verifying the signature");
                    bool verified = rsa.VerifyHash(RSATestData1024.GetHashValue(), RSATestData1024.HashAlgorithm, RSATestData1024.GetSignature());

                    if (!verified)
                    {
                        Log.Comment("Signature failed to verify - fail");
                        bRet = false;
                    }
                }
            }
            catch (Exception e)
            {
                Log.Exception("Error - unexpected exception:", e);
                bRet = false;
            }

            try
            {
                RSAParameters key = new RSAParameters();
                key.Exponent = RSATestData1536.GetExponent();
                key.Modulus = RSATestData1536.GetModulus();

                using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider())
                {
                    Log.Comment("Importing the RSA key size of 1536");
                    rsa.ImportParameters(key);

                    Log.Comment("Verifying the signature");
                    bool verified = rsa.VerifyHash(RSATestData1536.GetHashValue(), RSATestData1536.HashAlgorithm, RSATestData1536.GetSignature());

                    if (!verified)
                    {
                        Log.Comment("Signature failed to verify - fail");
                        bRet = false;
                    }
                }
            }
            catch (Exception e)
            {
                Log.Exception("Error - unexpected exception:", e);
                bRet = false;
            }

            try
            {
                RSAParameters key = new RSAParameters();
                key.Exponent = RSATestData2048.GetExponent();
                key.Modulus = RSATestData2048.GetModulus();

                using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider())
                {
                    Log.Comment("Importing the RSA key size of 2048");
                    rsa.ImportParameters(key);

                    Log.Comment("Verifying the signature");
                    bool verified = rsa.VerifyHash(RSATestData2048.GetHashValue(), RSATestData2048.HashAlgorithm, RSATestData2048.GetSignature());

                    if (!verified)
                    {
                        Log.Comment("Signature failed to verify - fail");
                        bRet = false;
                    }
                }
            }
            catch (Exception e)
            {
                Log.Comment("Error - unexpected exception:");
                Log.Exception("",e);
                bRet = false;
            }

            try
            {
                RSAParameters key = new RSAParameters();
                key.Exponent = RSATestData512.GetExponent();
                key.Modulus = RSATestData512.GetModulus();

                using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider())
                {
                    Log.Comment("Importing the RSA key with key size of 512");
                    rsa.ImportParameters(key);

                    Log.Comment("Verifying the signature");
                    bool verified = rsa.VerifyHash(RSATestData512.GetHashValue(), RSATestData512.HashAlgorithm, RSATestData512.GetSignature());

                    if (!verified)
                    {
                        Log.Comment("Signature not verified - Failed.");
                        bRet = false;
                    }
                }
            }
            catch (Exception e)
            {
                Log.Comment("Error - unexpected exception:");
                Log.Exception("",e);
                bRet = false;
            }

            try
            {
                RSAParameters key = new RSAParameters();
                key.Exponent = RSATestData4096.GetExponent();
                key.Modulus = RSATestData4096.GetModulus();

                using (RSACryptoServiceProvider rsa = new RSACryptoServiceProvider())
                {
                    Log.Comment("Importing the RSA key with key size of 4096");
                    rsa.ImportParameters(key);

                    Log.Comment("Verifying the signature");
                    bool verified = rsa.VerifyHash(RSATestData4096.GetHashValue(), RSATestData4096.HashAlgorithm, RSATestData4096.GetSignature());

                    if (!verified)
                    {
                        Log.Comment("Signature not verified - Failed.");
                        bRet = false;
                    }
                }
            }
            catch (Exception e)
            {
                Log.Comment("Error - unexpected exception:");
                Log.Exception("",e);
                bRet = false;
            }

            return bRet;
        }
    }
}