using System;
using System.Reflection;
using Microsoft.SPOT;
using Microsoft.SPOT.Platform.Test;
using System.Security.Cryptography;
using Microsoft.SPOT.Cryptoki;

namespace Microsoft.SPOT.Platform.Tests
{

    public class DSATests : IMFTestInterface
    {
        bool m_isEmulator;

        [SetUp]
        public InitializeResult Initialize()
        {
            Log.Comment("Adding set up for the tests.");

            // Add your functionality here.                
            try
            {
                m_isEmulator = (Microsoft.SPOT.Hardware.SystemInfo.SystemID.SKU == 3);
            }
            catch
            {
                return InitializeResult.Skip;
            }

            return InitializeResult.ReadyToGo;
        }

        [TearDown]
        public void CleanUp()
        {
        }

        [TestMethod]
        public MFTestResults DsaTest_ImportDsaKey()
        {
            MFTestResults res;

            try
            {
                using (Session session = new Session("", MechanismType.DSA))
                {
                    res = Test_ImportKey(session);
                }

                if (res == MFTestResults.Pass && m_isEmulator)
                {
                    using (Session session = new Session("Emulator_Crypto", MechanismType.DSA))
                    {
                        res = Test_ImportKey(session);
                    }
                }
            }
            catch
            {
                res = MFTestResults.Fail;
            }

            return res;
        }

        MFTestResults Test_ImportKey(Session session)
        {
            bool testResult = false;

            try
            {
                using (CryptoKey pubkey = CryptoKey.LoadKey(session, m_publicDsaKey))
                {
                    // replace publickey with private
                    CryptokiAttribute[] privateKey = new CryptokiAttribute[m_publicDsaKey.Length];

                    for (int x = 0; x < m_publicDsaKey.Length; x++)
                    {
                        privateKey[x] = new CryptokiAttribute(m_publicDsaKey[x].Type, new byte[m_publicDsaKey[x].Value.Length]);
                        Array.Copy(m_publicDsaKey[x].Value, privateKey[x].Value, m_publicDsaKey[x].Value.Length);
                    }

                    privateKey[0].Value = Utility.ConvertToBytes((int)CryptokiClass.PRIVATE_KEY);
                    privateKey[5].Value = new byte[]
                    {
                        0x45, 0xB3, 0x34, 0x77, 0x54, 0x3E, 0x7E, 0xBC, 0x82, 0xA8, 0x4E, 0x8E, 0x91, 0x55, 0x86, 0xC1, 
                        0xDA, 0x22, 0xDE, 0x09, 
                    };

                    using (CryptoKey privkey = CryptoKey.LoadKey(session, privateKey))
                    {
                        string dataToSign = "This is a simple message to be encrypted";

                        byte[] data = System.Text.UTF8Encoding.UTF8.GetBytes(dataToSign);

                        using (DSACryptoServiceProvider dsaEncr = new DSACryptoServiceProvider(privkey))
                        using(DSACryptoServiceProvider dsaDecr = new DSACryptoServiceProvider(pubkey))
                        {
                            byte[] signature = dsaEncr.SignData(data);

                            testResult = dsaDecr.VerifyData(data, signature);
                        }
                    }

                    using (CryptoKey privkey = CryptoKey.LoadKey(session, m_privateDsaKey))
                    {
                        string dataToSign = "This is a simple message to be encrypted";

                        byte[] data = System.Text.UTF8Encoding.UTF8.GetBytes(dataToSign);

                        using (DSACryptoServiceProvider dsaEncr = new DSACryptoServiceProvider(privkey))
                        using(DSACryptoServiceProvider dsaDecr = new DSACryptoServiceProvider(privkey))
                        {
                            byte[] signature = dsaEncr.SignData(data);

                            testResult &= dsaDecr.VerifyData(data, signature);
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                Log.Exception("Unexpected Exception", ex);
                testResult = false;
            }

            return (testResult ? MFTestResults.Pass : MFTestResults.Fail);
        }

        [TestMethod]
        public MFTestResults DsaTest_ImportRsaKeyAndUseWithDsaShouldFail()
        {
            bool testResult = false;

            try
            {
                using (Session session = new Session("", MechanismType.DSA))
                using (CryptoKey obj = CryptokiObject.CreateObject(session, m_privateRsaKey) as CryptoKey)
                {
                    string dataToSign = "This is a simple message to be encrypted";

                    byte[] data = System.Text.UTF8Encoding.UTF8.GetBytes(dataToSign);

                    using (DSACryptoServiceProvider dsa = new DSACryptoServiceProvider(obj))
                    {
                        byte[] signature = dsa.SignData(data);

                        dsa.VerifyData(data, signature);
                    }
                }
            }
            catch (ArgumentException)
            {
                testResult = true;
            }
            catch
            {
                testResult = false;
            }

            return (testResult ? MFTestResults.Pass : MFTestResults.Fail);
        }


        [TestMethod]
        public MFTestResults DsaTest_Signature()
        {
            MFTestResults res;

            try
            {
                using (Session session = new Session("", MechanismType.DSA))
                {
                    using (DSACryptoServiceProvider csp = new DSACryptoServiceProvider(session))
                    {
                        using (HashAlgorithm sha = new HashAlgorithm(HashAlgorithmType.SHA1, session))
                        {
                            res = TestSignature(csp, sha);
                        }
                    }
                }

                if (res == MFTestResults.Pass && m_isEmulator)
                {
                    using (Session session = new Session("Emulator_Crypto", MechanismType.DSA))
                    {
                        using (DSACryptoServiceProvider csp = new DSACryptoServiceProvider(session))
                        {
                            using (HashAlgorithm sha = new HashAlgorithm(HashAlgorithmType.SHA1, session))
                            {
                                res = TestSignature(csp, sha);
                            }
                        }
                    }
                }
            }
            catch
            {
                res = MFTestResults.Fail;
            }

            return res;
        }

        MFTestResults TestSignature(DSACryptoServiceProvider csp, HashAlgorithm hashAlg)
        {
            bool testResult = false;

            try
            {
                string dataToSign = "This is a simple message to be encrypted";

                byte[] data = System.Text.UTF8Encoding.UTF8.GetBytes(dataToSign);

                byte[] signature = csp.SignData(data);

                testResult = csp.VerifyData(data, signature);

                byte[] hash = hashAlg.ComputeHash(data);

                signature = csp.SignHash(hash, hashAlg.HashType);
                testResult &= csp.VerifyHash(hash, hashAlg.HashType, signature);
            }
            catch (Exception ex)
            {
                Log.Exception("Unexpected Exception", ex);
                testResult = false;
            }

            return (testResult ? MFTestResults.Pass : MFTestResults.Fail);
        }

        internal static CryptokiAttribute[] m_privateDsaKey = new CryptokiAttribute[]
        {
            new CryptokiAttribute(CryptokiAttribute.CryptokiType.Class  , Utility.ConvertToBytes((int)CryptokiClass.PRIVATE_KEY)),
            new CryptokiAttribute(CryptokiAttribute.CryptokiType.KeyType, Utility.ConvertToBytes((int)CryptoKey.KeyType.DSA)),
            new CryptokiAttribute(CryptokiAttribute.CryptokiType.Prime, new byte[]
                {
                    0xEA, 0x91, 0xF3, 0x4A, 0xB3, 0xC2, 0x2E, 0x08, 0x5F, 0x6C, 0x32, 0x41, 0xC7, 0xA4, 0xD6, 0x76,
                    0x40, 0xEB, 0x31, 0xCF, 0x4E, 0x7D, 0x4E, 0xF4, 0x80, 0x10, 0x9F, 0x37, 0x02, 0xEB, 0x72, 0x11,
                    0xCD, 0x38, 0xD6, 0x59, 0x41, 0x71, 0x7E, 0xC5, 0x1B, 0xBF, 0x0C, 0x2A, 0x6B, 0x8E, 0x3A, 0x75,
                    0x8C, 0xC8, 0xBC, 0x6A, 0xD4, 0x1B, 0x45, 0x57, 0xAF, 0x37, 0x9A, 0xFF, 0xEC, 0x82, 0xE7, 0x7F, 
                    0x08, 0xB1, 0x12, 0xF2, 0xEE, 0xE4, 0xAB, 0x4B, 0xA0, 0x65, 0xCB, 0x0B, 0xD0, 0xE4, 0x35, 0x79, 
                    0x12, 0x3A, 0x79, 0xB0, 0x2C, 0xF7, 0x25, 0x13, 0x2B, 0x77, 0x21, 0x92, 0x30, 0x8A, 0x71, 0xD7,
                    0x7F, 0xB9, 0xC4, 0x22, 0x5A, 0xFD, 0xE3, 0xEE, 0x36, 0xD4, 0x71, 0xF0, 0xB2, 0x13, 0x30, 0x15, 
                    0x74, 0xC6, 0xFA, 0xE0, 0xA6, 0x25, 0x9B, 0x90, 0x9C, 0x1E, 0xA6, 0x25, 0x8F, 0x09, 0x82, 0x15, 
                }),
            new CryptokiAttribute(CryptokiAttribute.CryptokiType.Subprime, new byte[]
                {
                    0xBE, 0x03, 0x3C, 0xAB, 0x5E, 0x1F, 0x30, 0x91, 0x06, 0x8B, 0x2E, 0xFA, 0x05, 0x2A, 0x65, 0x38, 
                    0x31, 0x00, 0xEE, 0xEF,
                }),
            new CryptokiAttribute(CryptokiAttribute.CryptokiType.Base, new byte[]
                {
                    0xA0, 0x2C, 0x0D, 0x4F, 0x11, 0x7C, 0x7C, 0x29, 0xC6, 0x63, 0xEC, 0x1F, 0x74, 0x04, 0xB5, 0xBC, 
                    0xB0, 0x77, 0xFF, 0xD1, 0x8C, 0xB0, 0xE2, 0x76, 0xD2, 0x5E, 0xD0, 0x95, 0xAF, 0x1E, 0xFB, 0xF3,
                    0x8B, 0x5B, 0x2D, 0x43, 0x85, 0x85, 0x5C, 0x8A, 0xC6, 0x81, 0x7A, 0xD8, 0x73, 0xD2, 0xE0, 0xEB,
                    0x3D, 0x01, 0xD6, 0x48, 0x32, 0xD9, 0xDE, 0x0B, 0x98, 0xC7, 0x71, 0x7E, 0xA8, 0x25, 0x77, 0xAD, 
                    0xCB, 0x7E, 0x88, 0x1A, 0x7E, 0x7E, 0x96, 0x7C, 0xB1, 0xD7, 0x93, 0xE5, 0xEB, 0xFB, 0x75, 0x8A,
                    0xC7, 0x5D, 0x76, 0x9B, 0xA4, 0xFF, 0x65, 0x7E, 0x28, 0xE6, 0x60, 0x37, 0x1F, 0x5E, 0x0B, 0x37,
                    0xE2, 0xE4, 0x53, 0xEC, 0xBD, 0xFA, 0xF7, 0x42, 0xEB, 0x8F, 0xFB, 0x07, 0x42, 0x24, 0x73, 0x39,
                    0x77, 0x47, 0x9C, 0xB8, 0xBA, 0x87, 0xDF, 0x61, 0xF4, 0xA6, 0xE1, 0x86, 0xBB, 0xF1, 0xB6, 0x18, 

                }),
                        
            new CryptokiAttribute(CryptokiAttribute.CryptokiType.PublicExponent, new byte[]
                {
                    0x11, 0x7F, 0x45, 0x01, 0x35, 0xE1, 0x55, 0xFB, 0x1C, 0x9A, 0x35, 0xB9, 0x35, 0xD7, 0xDE, 0x39, 
                    0x39, 0x19, 0x15, 0xE5, 0xB8, 0x88, 0xC1, 0xA2, 0xFD, 0x17, 0x63, 0x72, 0x93, 0x14, 0xC1, 0xB4,
                    0xCC, 0xB1, 0xDC, 0x20, 0x09, 0x6D, 0xAD, 0xED, 0x35, 0x60, 0xE2, 0x79, 0x76, 0x84, 0x2D, 0x58,
                    0xE5, 0x15, 0xBE, 0xF1, 0x6B, 0x09, 0xA8, 0xA0, 0xE5, 0xBF, 0x86, 0xFD, 0x5F, 0xC0, 0xC9, 0x86,
                    0xD1, 0x35, 0x8A, 0x12, 0xC0, 0xDD, 0x48, 0x2C, 0x90, 0x94, 0x2B, 0x3C, 0x08, 0xA3, 0xDB, 0x50,
                    0x4F, 0x90, 0xEE, 0x78, 0xA8, 0x0F, 0x34, 0x20, 0xD5, 0x71, 0xFB, 0x98, 0x41, 0x91, 0x05, 0x5F,
                    0x6B, 0xEC, 0x58, 0x0B, 0x8C, 0x2F, 0x74, 0x02, 0x49, 0x11, 0x81, 0xB8, 0xE6, 0x96, 0x87, 0x7B,
                    0x9C, 0x11, 0x99, 0xCC, 0xAA, 0xD9, 0x6E, 0xC0, 0xE8, 0x39, 0x3C, 0x3D, 0x46, 0x06, 0x87, 0xBA,
                }),

            new CryptokiAttribute(CryptokiAttribute.CryptokiType.Value, new byte[]
                {
                    0x45, 0xB3, 0x34, 0x77, 0x54, 0x3E, 0x7E, 0xBC, 0x82, 0xA8, 0x4E, 0x8E, 0x91, 0x55, 0x86, 0xC1, 
                    0xDA, 0x22, 0xDE, 0x09, 
                }),

        };

        internal static CryptokiAttribute[] m_publicDsaKey = new CryptokiAttribute[]
        {
            new CryptokiAttribute(CryptokiAttribute.CryptokiType.Class  , Utility.ConvertToBytes((int)CryptokiClass.PUBLIC_KEY)),
            new CryptokiAttribute(CryptokiAttribute.CryptokiType.KeyType, Utility.ConvertToBytes((int)CryptoKey.KeyType.DSA)),
            new CryptokiAttribute(CryptokiAttribute.CryptokiType.Prime, new byte[]
                {
                    0xEA, 0x91, 0xF3, 0x4A, 0xB3, 0xC2, 0x2E, 0x08, 0x5F, 0x6C, 0x32, 0x41, 0xC7, 0xA4, 0xD6, 0x76,
                    0x40, 0xEB, 0x31, 0xCF, 0x4E, 0x7D, 0x4E, 0xF4, 0x80, 0x10, 0x9F, 0x37, 0x02, 0xEB, 0x72, 0x11,
                    0xCD, 0x38, 0xD6, 0x59, 0x41, 0x71, 0x7E, 0xC5, 0x1B, 0xBF, 0x0C, 0x2A, 0x6B, 0x8E, 0x3A, 0x75,
                    0x8C, 0xC8, 0xBC, 0x6A, 0xD4, 0x1B, 0x45, 0x57, 0xAF, 0x37, 0x9A, 0xFF, 0xEC, 0x82, 0xE7, 0x7F, 
                    0x08, 0xB1, 0x12, 0xF2, 0xEE, 0xE4, 0xAB, 0x4B, 0xA0, 0x65, 0xCB, 0x0B, 0xD0, 0xE4, 0x35, 0x79, 
                    0x12, 0x3A, 0x79, 0xB0, 0x2C, 0xF7, 0x25, 0x13, 0x2B, 0x77, 0x21, 0x92, 0x30, 0x8A, 0x71, 0xD7,
                    0x7F, 0xB9, 0xC4, 0x22, 0x5A, 0xFD, 0xE3, 0xEE, 0x36, 0xD4, 0x71, 0xF0, 0xB2, 0x13, 0x30, 0x15, 
                    0x74, 0xC6, 0xFA, 0xE0, 0xA6, 0x25, 0x9B, 0x90, 0x9C, 0x1E, 0xA6, 0x25, 0x8F, 0x09, 0x82, 0x15, 
                }),
            new CryptokiAttribute(CryptokiAttribute.CryptokiType.Subprime, new byte[]
                {
                    0xBE, 0x03, 0x3C, 0xAB, 0x5E, 0x1F, 0x30, 0x91, 0x06, 0x8B, 0x2E, 0xFA, 0x05, 0x2A, 0x65, 0x38, 
                    0x31, 0x00, 0xEE, 0xEF,
                }),
            new CryptokiAttribute(CryptokiAttribute.CryptokiType.Base, new byte[]
                {
                    0xA0, 0x2C, 0x0D, 0x4F, 0x11, 0x7C, 0x7C, 0x29, 0xC6, 0x63, 0xEC, 0x1F, 0x74, 0x04, 0xB5, 0xBC, 
                    0xB0, 0x77, 0xFF, 0xD1, 0x8C, 0xB0, 0xE2, 0x76, 0xD2, 0x5E, 0xD0, 0x95, 0xAF, 0x1E, 0xFB, 0xF3,
                    0x8B, 0x5B, 0x2D, 0x43, 0x85, 0x85, 0x5C, 0x8A, 0xC6, 0x81, 0x7A, 0xD8, 0x73, 0xD2, 0xE0, 0xEB,
                    0x3D, 0x01, 0xD6, 0x48, 0x32, 0xD9, 0xDE, 0x0B, 0x98, 0xC7, 0x71, 0x7E, 0xA8, 0x25, 0x77, 0xAD, 
                    0xCB, 0x7E, 0x88, 0x1A, 0x7E, 0x7E, 0x96, 0x7C, 0xB1, 0xD7, 0x93, 0xE5, 0xEB, 0xFB, 0x75, 0x8A,
                    0xC7, 0x5D, 0x76, 0x9B, 0xA4, 0xFF, 0x65, 0x7E, 0x28, 0xE6, 0x60, 0x37, 0x1F, 0x5E, 0x0B, 0x37,
                    0xE2, 0xE4, 0x53, 0xEC, 0xBD, 0xFA, 0xF7, 0x42, 0xEB, 0x8F, 0xFB, 0x07, 0x42, 0x24, 0x73, 0x39,
                    0x77, 0x47, 0x9C, 0xB8, 0xBA, 0x87, 0xDF, 0x61, 0xF4, 0xA6, 0xE1, 0x86, 0xBB, 0xF1, 0xB6, 0x18, 

                }),
                        
            new CryptokiAttribute(CryptokiAttribute.CryptokiType.Value, new byte[]
                {
                    0x11, 0x7F, 0x45, 0x01, 0x35, 0xE1, 0x55, 0xFB, 0x1C, 0x9A, 0x35, 0xB9, 0x35, 0xD7, 0xDE, 0x39, 
                    0x39, 0x19, 0x15, 0xE5, 0xB8, 0x88, 0xC1, 0xA2, 0xFD, 0x17, 0x63, 0x72, 0x93, 0x14, 0xC1, 0xB4,
                    0xCC, 0xB1, 0xDC, 0x20, 0x09, 0x6D, 0xAD, 0xED, 0x35, 0x60, 0xE2, 0x79, 0x76, 0x84, 0x2D, 0x58,
                    0xE5, 0x15, 0xBE, 0xF1, 0x6B, 0x09, 0xA8, 0xA0, 0xE5, 0xBF, 0x86, 0xFD, 0x5F, 0xC0, 0xC9, 0x86,
                    0xD1, 0x35, 0x8A, 0x12, 0xC0, 0xDD, 0x48, 0x2C, 0x90, 0x94, 0x2B, 0x3C, 0x08, 0xA3, 0xDB, 0x50,
                    0x4F, 0x90, 0xEE, 0x78, 0xA8, 0x0F, 0x34, 0x20, 0xD5, 0x71, 0xFB, 0x98, 0x41, 0x91, 0x05, 0x5F,
                    0x6B, 0xEC, 0x58, 0x0B, 0x8C, 0x2F, 0x74, 0x02, 0x49, 0x11, 0x81, 0xB8, 0xE6, 0x96, 0x87, 0x7B,
                    0x9C, 0x11, 0x99, 0xCC, 0xAA, 0xD9, 0x6E, 0xC0, 0xE8, 0x39, 0x3C, 0x3D, 0x46, 0x06, 0x87, 0xBA,
                }),
        };


        private CryptokiAttribute[] m_privateRsaKey = new CryptokiAttribute[]
        {
            new CryptokiAttribute(CryptokiAttribute.CryptokiType.Class  , Utility.ConvertToBytes((int)CryptokiClass.PRIVATE_KEY)),
            new CryptokiAttribute(CryptokiAttribute.CryptokiType.KeyType, Utility.ConvertToBytes((int)CryptoKey.KeyType.RSA)),
            new CryptokiAttribute(CryptokiAttribute.CryptokiType.Modulus, new byte[]
                {
                    0x6b, 0xdf, 0x51, 0xef, 0xdb, 0x6f, 0x10, 0x5c, 0x32, 0xbf, 0x87, 0x1c, 0xd1, 0x4c, 0x24, 0x7e, 
                    0xe7, 0x2a, 0x14, 0x10, 0x6d, 0xeb, 0x2c, 0xd5, 0x8c, 0x0b, 0x95, 0x7b, 0xc7, 0x5d, 0xc6, 0x87,
                    0x12, 0xea, 0xa9, 0xcd, 0x57, 0x7d, 0x3e, 0xcb, 0xe9, 0x6a, 0x46, 0xd0, 0xe1, 0xae, 0x2f, 0x86,
                    0xd9, 0x50, 0xf9, 0x98, 0x71, 0xdd, 0x39, 0xfc, 0x0e, 0x60, 0xa9, 0xd3, 0xf2, 0x38, 0xbb, 0x8d,
                }),
            new CryptokiAttribute(CryptokiAttribute.CryptokiType.PublicExponent, new byte[]
                {
                    0x01, 0x00, 0x01,
                }),
            new CryptokiAttribute(CryptokiAttribute.CryptokiType.PrivateExponent, new byte[]
                {
                    0xc9, 0x53, 0x65, 0x80, 0xb7, 0x16, 0xf2, 0x5e, 0x5e, 0xde, 0x0b, 0x57, 0x47, 0x43, 0x86, 0x85, 
                    0x8a, 0xfb, 0x37, 0xac, 0x66, 0x34, 0xba, 0x09, 0x1a, 0xb1, 0x21, 0x0b, 0xaa, 0xfa, 0x6c, 0xb7,
                    0x75, 0xa7, 0x3e, 0x23, 0x18, 0x58, 0x95, 0x90, 0xb5, 0x29, 0xa4, 0x1e, 0x15, 0x76, 0x52, 0x56,
                    0xbb, 0x3d, 0x6b, 0x1d, 0x2a, 0xd1, 0x9f, 0x5c, 0x8a, 0xc0, 0x55, 0xea, 0xc3, 0x29, 0xa2, 0x1e,
                }),
            new CryptokiAttribute(CryptokiAttribute.CryptokiType.Prime1, new byte[]
                {
                    0x5d, 0x2c, 0xbc, 0x1e, 0xc3, 0x38, 0xfe, 0x00, 0x5e, 0xca, 0xcf, 0xcd, 0xb4, 0x13, 0x89, 0x16, 
                    0xd2, 0x07, 0xbc, 0x9b, 0xe1, 0x20, 0x31, 0x0b, 0x81, 0x28, 0x17, 0x0c, 0xc7, 0x73, 0x94, 0xee
                }),
            new CryptokiAttribute(CryptokiAttribute.CryptokiType.Prime2, new byte[]
                {
                    0x67, 0xbe, 0x7b, 0x78, 0x4e, 0xc7, 0x91, 0x73, 0xa8, 0x34, 0x5a, 0x24, 0x9d, 0x92, 0x0d, 0xe8, 
                    0x91, 0x61, 0x24, 0xdc, 0xb5, 0xeb, 0xdf, 0x71, 0x66, 0xdc, 0xe1, 0x77, 0xd4, 0x78, 0x14, 0x98
                }),
            new CryptokiAttribute(CryptokiAttribute.CryptokiType.Exponent1, new byte[]
                {
                    0x79, 0x44, 0xb0, 0x19, 0xf6, 0xf0, 0x7d, 0x63, 0xcf, 0x62, 0x67, 0x78, 0xd0, 0x7b, 0x10, 0xae, 
                    0x6b, 0xdb, 0x40, 0xb3, 0xb2, 0xeb, 0x2e, 0x9f, 0x31, 0x34, 0x2d, 0xcb, 0xbf, 0xa2, 0x6a, 0xa6
                }),
            new CryptokiAttribute(CryptokiAttribute.CryptokiType.Exponent2, new byte[]
                {
                    0x1f, 0xe9, 0x03, 0x42, 0xf2, 0x63, 0x9b, 0xb7, 0x33, 0xd0, 0xfe, 0x20, 0x83, 0x26, 0x1f, 0x56, 
                    0xa8, 0x24, 0xf5, 0x6d, 0x19, 0x51, 0xa5, 0x92, 0x31, 0xe4, 0x2b, 0xbc, 0x11, 0xc8, 0x26, 0x75
                }),
            new CryptokiAttribute(CryptokiAttribute.CryptokiType.Coefficent, new byte[]
                {
                    0xa0, 0x51, 0xe9, 0x83, 0xca, 0xee, 0x4b, 0xf0, 0x59, 0xeb, 0xa4, 0x81, 0xd6, 0x1f, 0x49, 0x42, 
                    0x2b, 0x75, 0x89, 0xa7, 0x9f, 0x84, 0x7f, 0x1f, 0xc3, 0x8f, 0x70, 0xb6, 0x7e, 0x06, 0x5e, 0x8b
                }),

        };
    }
}