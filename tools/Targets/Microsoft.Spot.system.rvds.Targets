<Project  xmlns="http://schemas.microsoft.com/developer/msbuild/2003"  ToolsVersion="4.0">

   <PropertyGroup>
    <BuildToolName>RVDS</BuildToolName>
    <BuildToolGuid>{1942C531-3AAC-4abb-8B4F-C3111012F9D9}</BuildToolGuid>
    <Documentation></Documentation>
    <ProcessorTypes>XScale;ARM7TDMI;ARM7TDMI-S;arm920t;arm926EJ-S;Cortex-M3</ProcessorTypes>
    <ISAs>arm;thumb;thumb2</ISAs>
  </PropertyGroup>

  <PropertyGroup Condition="'$(ADS_TOOLS)'==''">
    <!-- these may need to be environment vars -->
    <ARMCONF>$(ADS_TOOLS_BIN)</ARMCONF>
    <ARMDLL >$(ADS_TOOLS_BIN)</ARMDLL>
    <ARMHOME>$(ADS_TOOLS)</ARMHOME>
    <ARMINC >$(ADS_TOOLS)\INCLUDE</ARMINC>
    <ARMLIB >$(ADS_TOOLS)\LIB</ARMLIB>
  </PropertyGroup>

  <PropertyGroup>
    <ADS_WRAPPER Condition="'$(NO_ADS_WRAPPER)'=='' AND '$(ADS_WRAPPER)'==''">$(SPO_SDK)\tools\make\ADSwrapper.cmd</ADS_WRAPPER>
    <TARGETCURRENT>$(SPO_BUILD)\$(INSTRUCTION_SET)\$(TARGETLOCATION)\$(OLD_FLAVOR)\$(TARGETPLATFORM)\bin</TARGETCURRENT>
    <!-- ARM Tools -->
    <CC  >$(ADS_WRAPPER) "$(ADS_TOOLS_BIN)\armcc.exe"</CC>
    <AS  >$(ADS_WRAPPER) "$(ADS_TOOLS_BIN)\armasm.exe"</AS>
    <LINK>$(ADS_WRAPPER) "$(ADS_TOOLS_BIN)\armlink.exe"</LINK>
    <AR  >$(ADS_WRAPPER) "$(ADS_TOOLS_BIN)\armar.exe"</AR>
    <FROMELF>$(ADS_WRAPPER) "$(ADS_TOOLS_BIN)\fromelf.exe"</FROMELF>
    <CC_CPP_COMMON_FLAGS>$(CC_CPP_COMMON_FLAGS) -D__errno_h</CC_CPP_COMMON_FLAGS>
  </PropertyGroup>

  <PropertyGroup Condition="'$(COMPILER_TOOL_VERSION)'!='RVDS4.0' and '$(COMPILER_TOOL_VERSION)'!='RVDS4.1'">
    <CPP >$(ADS_WRAPPER) "$(ADS_TOOLS_BIN)\armcpp.exe"</CPP>	
    <TCC >$(ADS_WRAPPER) "$(ADS_TOOLS_BIN)\tcc.exe"</TCC>
    <TCPP>$(ADS_WRAPPER) "$(ADS_TOOLS_BIN)\tcpp.exe"</TCPP>
  </PropertyGroup>

  <PropertyGroup Condition="'$(COMPILER_TOOL_VERSION)'=='RVDS4.0' or '$(COMPILER_TOOL_VERSION)'=='RVDS4.1'">
    <CPP >$(ADS_WRAPPER) "$(ADS_TOOLS_BIN)\armcc.exe"</CPP>	
    <TCC >$(ADS_WRAPPER) "$(ADS_TOOLS_BIN)\armcc.exe"</TCC>
    <TCPP>$(ADS_WRAPPER) "$(ADS_TOOLS_BIN)\armcc.exe"</TCPP>
  </PropertyGroup>

  <!-- base on cpu type, setup compiler-->
  <PropertyGroup Condition="'$(COMPILER_TOOL_VERSION)'=='ADS1.2'">
    <POS_DEPENDENT  >$(SWTC)apcs /nointer/noropi/norwpi/noswst</POS_DEPENDENT>
    <POS_INDEPENDENT>$(SWTC)apcs /nointer/ropi/norwpi/noswst</POS_INDEPENDENT>

    <CC_CPP_TARGETTYPE_FLAGS Condition="'$(FLAVOR)'=='RTM'"         >$(CC_CPP_TARGETTYPE_FLAGS) -g- -gt-p -O2 -Oinline </CC_CPP_TARGETTYPE_FLAGS>
    <CC_CPP_TARGETTYPE_FLAGS Condition="'$(FLAVOR)'=='Debug'"       >$(CC_CPP_TARGETTYPE_FLAGS) -g+ -gt+p -O0 -Oinline </CC_CPP_TARGETTYPE_FLAGS>
    <CC_CPP_TARGETTYPE_FLAGS Condition="'$(FLAVOR)'=='Instrumented'">$(CC_CPP_TARGETTYPE_FLAGS) -g+ -gt+p -O0 -Oinline </CC_CPP_TARGETTYPE_FLAGS>
    <CC_CPP_TARGETTYPE_FLAGS Condition="'$(FLAVOR)'=='Release'"     >$(CC_CPP_TARGETTYPE_FLAGS) -g- -gt-p -O2 -Oinline </CC_CPP_TARGETTYPE_FLAGS>

    <CC_CPP_COMMON_FLAGS>$(CC_CPP_COMMON_FLAGS) -DARM_V1_2 -Otime -Ono_autoinline -Ono_known_library -Ono_ldrd -asm -fs -Ez</CC_CPP_COMMON_FLAGS>

    <CC_FLAGS >$(CC_FLAGS) -ansi $(STRICT) -fa -W+u -zo</CC_FLAGS>
    <CPP_FLAGS>$(CPP_FLAGS) -cpp $(STRICT) -Wa -Wb -Wx -zo</CPP_FLAGS>
  </PropertyGroup>

  <PropertyGroup>
    <FROMELF_FLAGS Condition="'$(COMPILER_TOOL_VERSION)'=='ADS1.2'" >$(FROMELF_FLAGS) $(SWTC)nodebug -c</FROMELF_FLAGS>
    <FROMELF_FLAGS Condition="'$(COMPILER_TOOL_VERSION)'=='RVDS3.0'">$(FROMELF_FLAGS) $(SWTC)no_debug -c</FROMELF_FLAGS>
    <FROMELF_FLAGS Condition="'$(COMPILER_TOOL_VERSION)'=='RVDS3.1'">$(FROMELF_FLAGS) -c</FROMELF_FLAGS>
    <FROMELF_FLAGS Condition="'$(COMPILER_TOOL_VERSION)'=='RVDS4.0'">$(FROMELF_FLAGS) -c</FROMELF_FLAGS>
    <FROMELF_FLAGS Condition="'$(COMPILER_TOOL_VERSION)'=='RVDS4.1'">$(FROMELF_FLAGS) -c</FROMELF_FLAGS>
  </PropertyGroup>

  <PropertyGroup Condition="'$(COMPILER_TOOL_VERSION)'=='RVDS3.0'">
    <POS_DEPENDENT   Condition = "'$(INSTRUCTION_SET)'=='arm'"                                    >$(SWTC)apcs /nointer/noropi/norwpi/noswst</POS_DEPENDENT>
    <POS_INDEPENDENT Condition = "'$(INSTRUCTION_SET)'=='arm'"                                    >$(SWTC)apcs /nointer/ropi/norwpi/noswst</POS_INDEPENDENT>
    <POS_DEPENDENT   Condition = "'$(INSTRUCTION_SET)'=='thumb' or '$(INSTRUCTION_SET)'=='thumb2'">$(SWTC)apcs /interwork/noropi/norwpi/noswst</POS_DEPENDENT>
    <POS_INDEPENDENT Condition = "'$(INSTRUCTION_SET)'=='thumb' or '$(INSTRUCTION_SET)'=='thumb2'">$(SWTC)apcs /interwork/ropi/norwpi/noswst</POS_INDEPENDENT>

    <AS_CC_CPP_COMMON_FLAGS Condition = "'$(INSTRUCTION_SET)'=='arm'"                                    >$(AS_CC_CPP_COMMON_FLAGS) $(SWTC)arm</AS_CC_CPP_COMMON_FLAGS>
    <AS_CC_CPP_COMMON_FLAGS Condition = "'$(INSTRUCTION_SET)'=='thumb' or '$(INSTRUCTION_SET)'=='thumb2'">$(AS_CC_CPP_COMMON_FLAGS) $(SWTC)thumb</AS_CC_CPP_COMMON_FLAGS>

    <CC_CPP_COMMON_FLAGS                                    >$(CC_CPP_COMMON_FLAGS) -DARM_V3_0</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(reducesize)'!='true'">$(CC_CPP_COMMON_FLAGS) $(SWTC)feedback $(SPO_SDK)\tools\make\Feedback\$(TARGETPLATFORM)_$(COMPILER_TOOL_VERSION).feedback</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(reducesize)'=='true'">$(CC_CPP_COMMON_FLAGS) $(SWTC)feedback $(SPO_SDK)\tools\make\Feedback\$(TARGETPLATFORM)_$(COMPILER_TOOL_VERSION)_loader.feedback</CC_CPP_COMMON_FLAGS>

    <CC_CPP_TARGETTYPE_FLAGS Condition="'$(FLAVOR)'=='RTM'"         >$(CC_CPP_TARGETTYPE_FLAGS) $(SWTC)no_debug $(SWTC)dwarf2 $(SWTC)no_debug_macros -O3 $(SWTC)inline -Otime $(SWTC)no_autoinline $(SWTC)asm $(SWTC)interleave</CC_CPP_TARGETTYPE_FLAGS>
    <CC_CPP_TARGETTYPE_FLAGS Condition="'$(FLAVOR)'=='Debug'"       >$(CC_CPP_TARGETTYPE_FLAGS) $(SWTC)debug    $(SWTC)dwarf2 $(SWTC)debug_macros    -O0 $(SWTC)inline                             $(SWTC)asm $(SWTC)interleave</CC_CPP_TARGETTYPE_FLAGS>
    <CC_CPP_TARGETTYPE_FLAGS Condition="'$(FLAVOR)'=='Instrumented'">$(CC_CPP_TARGETTYPE_FLAGS) $(SWTC)debug    $(SWTC)dwarf2 $(SWTC)debug_macros    -O0 $(SWTC)inline                             $(SWTC)asm $(SWTC)interleave</CC_CPP_TARGETTYPE_FLAGS>
    <CC_CPP_TARGETTYPE_FLAGS Condition="'$(FLAVOR)'=='Release'"     >$(CC_CPP_TARGETTYPE_FLAGS) $(SWTC)no_debug $(SWTC)dwarf2 $(SWTC)no_debug_macros -O2 $(SWTC)inline -Otime $(SWTC)no_autoinline $(SWTC)asm $(SWTC)interleave</CC_CPP_TARGETTYPE_FLAGS>


    <AS_FLAGS Condition = "'$(INSTRUCTION_SET)'=='thumb' ">$(AS_FLAGS) $(SWTC)apcs /interwork </AS_FLAGS>
    <AS_FLAGS>$(AS_FLAGS) $(SWTC)diag_suppress A1658</AS_FLAGS>

    <CC_FLAGS  >$(CC_FLAGS) $(SWTC)c90 $(STRICT) $(SWTC)diag_suppress 2874,111,161,550,C3011 $(SWTC)diag_warning 40,187 $(SWTC)split_sections</CC_FLAGS>
    <CPP_FLAGS >$(CPP_FLAGS) $(SWTC)cpp $(STRICT) $(SWTC)diag_suppress 2874,111,161,550,C3011 $(SWTC)diag_suppress 66,161,230,1293 $(SWTC)split_sections</CPP_FLAGS>
    <LINK_FLAGS>$(LINK_FLAGS) $(SWTC)no_keep_init_arrays $(SWTC)feedback $(BIN_DIR)\$(AssemblyName)_$(TARGETPLATFORM)_$(TARGETLOCATION)_$(FLAVOR)_$(COMPILER_TOOL_VERSION).feedback</LINK_FLAGS>
  </PropertyGroup>

  <PropertyGroup Condition="'$(COMPILER_TOOL_VERSION)'=='RVDS3.1' or '$(COMPILER_TOOL_VERSION)'=='RVDS4.0'  or '$(COMPILER_TOOL_VERSION)'=='RVDS4.1'">
    <POS_DEPENDENT   Condition = "'$(INSTRUCTION_SET)'=='arm'"                                    >$(SWTC)apcs /nointer/noropi/norwpi/noswst</POS_DEPENDENT>
    <POS_INDEPENDENT Condition = "'$(INSTRUCTION_SET)'=='arm'"                                    >$(SWTC)apcs /nointer/ropi/norwpi/noswst</POS_INDEPENDENT>
    <POS_DEPENDENT   Condition = "'$(INSTRUCTION_SET)'=='thumb' or '$(INSTRUCTION_SET)'=='thumb2'">$(SWTC)apcs /interwork/noropi/norwpi/noswst</POS_DEPENDENT>
    <POS_INDEPENDENT Condition = "'$(INSTRUCTION_SET)'=='thumb' or '$(INSTRUCTION_SET)'=='thumb2'">$(SWTC)apcs /interwork/ropi/norwpi/noswst</POS_INDEPENDENT>

    <AS_CC_CPP_COMMON_FLAGS Condition = "'$(INSTRUCTION_SET)'=='arm'"                                    >$(AS_CC_CPP_COMMON_FLAGS) $(SWTC)arm</AS_CC_CPP_COMMON_FLAGS>
    <AS_CC_CPP_COMMON_FLAGS Condition = "'$(INSTRUCTION_SET)'=='thumb' or '$(INSTRUCTION_SET)'=='thumb2'">$(AS_CC_CPP_COMMON_FLAGS) $(SWTC)thumb</AS_CC_CPP_COMMON_FLAGS>

    <CC_CPP_TARGETTYPE_FLAGS_OPTIMIZATION                                          >-Otime</CC_CPP_TARGETTYPE_FLAGS_OPTIMIZATION>
    <CC_CPP_TARGETTYPE_FLAGS_OPTIMIZATION Condition="'$(INSTRUCTION_SET)'=='thumb'">-Ospace</CC_CPP_TARGETTYPE_FLAGS_OPTIMIZATION>
    <CC_CPP_TARGETTYPE_FLAGS_OPTIMIZATION Condition="'$(FLAVOR)'=='Debug'"         ></CC_CPP_TARGETTYPE_FLAGS_OPTIMIZATION>

    <CC_CPP_COMMON_FLAGS>$(CC_CPP_COMMON_FLAGS) $(SWTC)library_interface=aeabi_clib</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS>$(CC_CPP_COMMON_FLAGS) -DARM_V3_1</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(reducesize)'!='true'">$(CC_CPP_COMMON_FLAGS) $(SWTC)feedback $(SPO_SDK)\tools\make\Feedback\$(TARGETPLATFORM)_$(COMPILER_TOOL_VERSION).feedback</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(reducesize)'=='true'">$(CC_CPP_COMMON_FLAGS) $(SWTC)feedback $(SPO_SDK)\tools\make\Feedback\$(TARGETPLATFORM)_$(COMPILER_TOOL_VERSION)_loader.feedback</CC_CPP_COMMON_FLAGS>

    <CC_CPP_TARGETTYPE_FLAGS Condition="'$(FLAVOR)'=='RTM'"         >$(CC_CPP_TARGETTYPE_FLAGS) $(SWTC)no_debug $(SWTC)no_debug_macros -O3 $(SWTC)no_autoinline</CC_CPP_TARGETTYPE_FLAGS>
    <CC_CPP_TARGETTYPE_FLAGS Condition="'$(FLAVOR)'=='Debug'"       >$(CC_CPP_TARGETTYPE_FLAGS) $(SWTC)debug    $(SWTC)debug_macros    -O0                     </CC_CPP_TARGETTYPE_FLAGS>
    <CC_CPP_TARGETTYPE_FLAGS Condition="'$(FLAVOR)'=='Instrumented'">$(CC_CPP_TARGETTYPE_FLAGS) $(SWTC)debug    $(SWTC)no_debug_macros -O0 $(SWTC)no_autoinline</CC_CPP_TARGETTYPE_FLAGS>
    <CC_CPP_TARGETTYPE_FLAGS Condition="'$(FLAVOR)'=='Release'"     >$(CC_CPP_TARGETTYPE_FLAGS) $(SWTC)no_debug $(SWTC)no_debug_macros -O2 $(SWTC)no_autoinline</CC_CPP_TARGETTYPE_FLAGS>

    <CC_CPP_TARGETTYPE_FLAGS>$(CC_CPP_TARGETTYPE_FLAGS) $(SWTC)inline $(SWTC)dwarf2 $(SWTC)asm $(SWTC)interleave $(CC_CPP_TARGETTYPE_FLAGS_OPTIMIZATION)</CC_CPP_TARGETTYPE_FLAGS>

    <AS_FLAGS Condition = "'$(INSTRUCTION_SET)'=='thumb'">$(AS_FLAGS) $(SWTC)apcs /interwork </AS_FLAGS>
    <AS_FLAGS>$(AS_FLAGS) $(SWTC)diag_suppress A1658</AS_FLAGS>

    <CC_FLAGS  >$(CC_FLAGS) $(SWTC)c90 $(STRICT) $(SWTC)diag_suppress 2874,111,161,550,C3011 $(SWTC)diag_warning 40,187 $(SWTC)split_sections</CC_FLAGS>
    <CPP_FLAGS >$(CPP_FLAGS) $(SWTC)cpp $(STRICT) $(SWTC)diag_suppress 2874,111,161,550,C3011 $(SWTC)diag_suppress 66,161,230,1293 $(SWTC)split_sections</CPP_FLAGS>
    <LINK_FLAGS>$(LINK_FLAGS) $(SWTC)no_keep_init_arrays $(SWTC)feedback $(BIN_DIR)\$(AssemblyName)_$(TARGETPLATFORM)_$(TARGETLOCATION)_$(FLAVOR)_$(COMPILER_TOOL_VERSION).feedback</LINK_FLAGS>
  </PropertyGroup>



  <PropertyGroup>
    <!--Common flags for Assembler/CC/CPP  -->

    <!-- ONLY USE CPU specification for platform specific code (HAL) -->
    <ARM_TYPE_FLAGS Condition="'$(PlatformIndependentBuild)'=='true'"></ARM_TYPE_FLAGS>
    <ARM_TYPE_FLAGS Condition="'$(PlatformIndependentBuild)'!='true' AND '$(DEVICE_TYPE)' != ''">$(SWTC)cpu $(DEVICE_TYPE)</ARM_TYPE_FLAGS>
    <ARM_TYPE_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb2'        AND '$(DEVICE_TYPE)' != ''">$(SWTC)cpu $(DEVICE_TYPE)</ARM_TYPE_FLAGS>

    <!-- Use default fpu specification for Cortex-M4F -->
    <FLOATING_POINT_FLAG Condition="'$(PLATFORM_EMULATED_FLOATINGPOINT)'!='true' AND '$(DEVICE_TYPE)'!='Cortex-M4.fp'"> $(SWTC)fpu softvfp </FLOATING_POINT_FLAG>
    <FLOATING_POINT_FLAG Condition="'$(PLATFORM_EMULATED_FLOATINGPOINT)'=='true'"> $(SWTC)fpu none </FLOATING_POINT_FLAG>

    <AS_CC_CPP_COMMON_FLAGS>$(AS_CC_CPP_COMMON_FLAGS) $(FLOATING_POINT_FLAG) $(ARM_TYPE_FLAGS)</AS_CC_CPP_COMMON_FLAGS>
    <AS_CC_CPP_COMMON_FLAGS Condition="'$(ENDIANNESS)'=='le'">$(AS_CC_CPP_COMMON_FLAGS) $(SWTC)littleend</AS_CC_CPP_COMMON_FLAGS>
    <AS_CC_CPP_COMMON_FLAGS Condition="'$(ENDIANNESS)'=='be'">$(AS_CC_CPP_COMMON_FLAGS) $(SWTC)bigend</AS_CC_CPP_COMMON_FLAGS>
  </PropertyGroup>

  <!-- Assembler flags -->
  <PropertyGroup>

    <AS_TARGETTYPE_FLAGS Condition="'$(FLAVOR)'=='RTM'"         >$(AS_TARGETTYPE_FLAGS) $(SWTC)PD "BUILD_RTM SETS \"1\""</AS_TARGETTYPE_FLAGS>
    <AS_TARGETTYPE_FLAGS Condition="'$(FLAVOR)'=='Release'"     >$(AS_TARGETTYPE_FLAGS) $(SWTC)PD "BUILD_RTM SETS \"0\""</AS_TARGETTYPE_FLAGS>
    <AS_TARGETTYPE_FLAGS Condition="'$(FLAVOR)'=='Instrumented'">$(AS_TARGETTYPE_FLAGS) $(SWTC)PD "BUILD_RTM SETS \"0\"" -g</AS_TARGETTYPE_FLAGS>
    <AS_TARGETTYPE_FLAGS Condition="'$(FLAVOR)'=='Debug'"       >$(AS_TARGETTYPE_FLAGS) $(SWTC)PD "BUILD_RTM SETS \"0\"" -g</AS_TARGETTYPE_FLAGS>

    <!-- Adjust the compiler/assembler flags according to the settings -->
    <AS_FLAGS Condition="'$(FLAVOR)'=='Instrumented'">$(AS_FLAGS) $(SWTC)PD "PROFILE_BUILD SETS \"1\""</AS_FLAGS>
    <AS_FLAGS Condition="'$(sampleprof)'=='true'"    >$(AS_FLAGS) $(SWTC)PD "FIQ_SAMPLING_PROFILER SETS \"1\""</AS_FLAGS>
    <AS_FLAGS Condition="'$(latencyprof)'=='true'"   >$(AS_FLAGS) $(SWTC)PD "FIQ_LATENCY_PROFILER SETS \"1\""</AS_FLAGS>
    <AS_FLAGS Condition="'$(INSTRUCTION_SET)'=='arm'"        >$(AS_FLAGS) $(SWTC)PD "COMPILE_ARM SETS \"1\""</AS_FLAGS>
    <AS_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb'"      >$(AS_FLAGS) $(SWTC)PD "COMPILE_THUMB SETS \"1\""</AS_FLAGS>
    <AS_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb2'"     >$(AS_FLAGS) $(SWTC)PD "COMPILE_THUMB2 SETS \"1\""</AS_FLAGS>

    <!-- Assembler flags -->
    <AS_FLAGS>$(AS_FLAGS) $(SWTC)PD "TargetLocation SETS \"$(TARGETLOCATION)\""</AS_FLAGS>
    <!-- pedantic matching of letter case with old makefiles -->
    <AS_FLAGS>$(AS_FLAGS) $(SWTC)PD "TargetType         SETS \"$(OLD_FLAVOR)\""</AS_FLAGS>
    <AS_FLAGS>$(AS_FLAGS) $(SWTC)PD "TargetModel        SETS \"$(TARGETPLATFORM)\""</AS_FLAGS>
    <AS_FLAGS>$(AS_FLAGS) $(SWTC)PD "TargetPlatformName SETS \"PLATFORM_ARM_$(TARGETPLATFORM)\""</AS_FLAGS>
    <AS_FLAGS>$(AS_FLAGS) $(SWTC)PD "CompilerVersion    SETS \"$(COMPILER_TOOL_VERSION)\""</AS_FLAGS>
    <AS_FLAGS>$(AS_FLAGS) $(SWTC)PD "TargetPlatformProcessor SETS \"PLATFORM_ARM_$(TARGETPROCESSOR)\""</AS_FLAGS>
    <AS_FLAGS Condition="'$(reducesize)'=='true'">$(AS_FLAGS) $(SWTC)PD "HAL_REDUCESIZE SETS \"1\""</AS_FLAGS>
    <AS_FLAGS Condition="'$(reducesize)'!='true'">$(AS_FLAGS) $(SWTC)PD "HAL_REDUCESIZE SETS \"0\""</AS_FLAGS>

    <AS_FLAGS>$(AS_FLAGS) $(AS_CC_CPP_COMMON_FLAGS) $(AS_TARGETTYPE_FLAGS) $(AS_INCS) -g $(SWTC)keep</AS_FLAGS>

    <AS_FLAGS>$(AS_FLAGS) @(AS_Defines->'$(SWTC)PD %(filename) SETS \"1\"',' ')</AS_FLAGS>

    <AS_SUBDIR>RVD_S</AS_SUBDIR>

    <!-- These would have to be conditional for non-Ollie support -->
  </PropertyGroup>


  <!-- common cc/cpp flags for ARM compiler ADS1.2, RVDS3.0 and RVDS3.1 for c/cpp -->
  <PropertyGroup>
    <!-- CPP/CC flags depands on the target build -->
    <CC_CPP_TARGETTYPE_FLAGS Condition="'$(FLAVOR)'=='RTM'"         >$(CC_CPP_TARGETTYPE_FLAGS) -DBUILD_RTM</CC_CPP_TARGETTYPE_FLAGS>
    <CC_CPP_TARGETTYPE_FLAGS Condition="'$(FLAVOR)'=='Debug'"       >$(CC_CPP_TARGETTYPE_FLAGS) -DDEBUG -D_DEBUG</CC_CPP_TARGETTYPE_FLAGS>
    <CC_CPP_TARGETTYPE_FLAGS Condition="'$(FLAVOR)'=='Instrumented'">$(CC_CPP_TARGETTYPE_FLAGS) -DDEBUG -D_DEBUG</CC_CPP_TARGETTYPE_FLAGS>
    <CC_CPP_TARGETTYPE_FLAGS Condition="'$(FLAVOR)'=='Release'"     >$(CC_CPP_TARGETTYPE_FLAGS) -DNDEBUG</CC_CPP_TARGETTYPE_FLAGS>

    <CC_CPP_COMMON_FLAGS Condition="'$(TCP_IP_STACK)'=='LWIP'">$(CC_CPP_COMMON_FLAGS) -DTCPIP_LWIP</CC_CPP_COMMON_FLAGS>

    <CC_CPP_COMMON_FLAGS Condition="'$(reducesize)'=='true'" >$(CC_CPP_COMMON_FLAGS) -DHAL_REDUCESIZE</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(timewarp)'=='true'"   >$(CC_CPP_COMMON_FLAGS) -DHAL_TIMEWARP</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(profile)'=='true'"    >$(CC_CPP_COMMON_FLAGS) -DARM_PROFILE_ACTIVE</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(FLAVOR)'!='RTM'"      >$(CC_CPP_COMMON_FLAGS) -DTINYCLR_ENABLE_SOURCELEVELDEBUGGING </CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(FLAVOR)'=='Instrumented'">$(CC_CPP_COMMON_FLAGS) -DTINYCLR_PROFILE_NEW -DTINYCLR_PROFILE_NEW_CALLS -DTINYCLR_PROFILE_NEW_ALLOCATIONS -DTINYCLR_PROFILE_HANDLER -DPROFILE_BUILD</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(sampleprof)'=='true'" >$(CC_CPP_COMMON_FLAGS) -DFIQ_SAMPLING_PROFILER </CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(latencyprof)'=='true'">$(CC_CPP_COMMON_FLAGS) -DFIQ_LATENCY_PROFILER </CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='arm'"     >$(CC_CPP_COMMON_FLAGS) -DCOMPILE_ARM </CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb'"   >$(CC_CPP_COMMON_FLAGS) -DCOMPILE_THUMB </CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(INSTRUCTION_SET)'=='thumb2'"  >$(CC_CPP_COMMON_FLAGS) -DCOMPILE_THUMB2 </CC_CPP_COMMON_FLAGS>

    <CC_CPP_COMMON_FLAGS Condition="'$(FLAVOR)'=='Instrumented' and '$(NATIVE_PROFILE_CLR)'!=''">$(CC_CPP_COMMON_FLAGS) -DNATIVE_PROFILE_CLR=$(NATIVE_PROFILE_CLR)</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(FLAVOR)'=='Instrumented' and '$(NATIVE_PROFILE_PAL)'!=''">$(CC_CPP_COMMON_FLAGS) -DNATIVE_PROFILE_PAL=$(NATIVE_PROFILE_PAL)</CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(FLAVOR)'=='Instrumented' and '$(NATIVE_PROFILE_HAL)'!=''">$(CC_CPP_COMMON_FLAGS) -DNATIVE_PROFILE_HAL=$(NATIVE_PROFILE_HAL)</CC_CPP_COMMON_FLAGS>

    <!-- BUILD VERSIONS -->
    <CC_CPP_COMMON_FLAGS>$(CC_CPP_COMMON_FLAGS) -DVERSION_MAJOR=$(MajorVersion) -DVERSION_MINOR=$(MinorVersion) -DVERSION_BUILD=$(BuildNumber) -DVERSION_REVISION=$(RevisionNumber) -DOEMSYSTEMINFOSTRING="\"$(OemSystemInfoString)\""</CC_CPP_COMMON_FLAGS>

    <CC_CPP_COMMON_FLAGS>$(CC_CPP_COMMON_FLAGS) -DPLATFORM_ARM_$(TARGETPLATFORM) </CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS>$(CC_CPP_COMMON_FLAGS) -DTARGETLOCATION_$(TARGETLOCATION) </CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(ENDIANNESS)'=='le'">$(CC_CPP_COMMON_FLAGS) -DLITTLE_ENDIAN </CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(ENDIANNESS)'=='be'">$(CC_CPP_COMMON_FLAGS) -DBIG_ENDIAN </CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(PATCH_BUILD)'=='Active'">$(CC_CPP_COMMON_FLAGS) -DPATCH_BUILD </CC_CPP_COMMON_FLAGS>
    <CC_CPP_COMMON_FLAGS Condition="'$(OS_PLATFORM)'=='true'"  >$(CC_CPP_COMMON_FLAGS) -DPLATFORM_ARM_OS_PORT </CC_CPP_COMMON_FLAGS>

    <CC_CPP_COMMON_FLAGS>$(CC_CPP_COMMON_FLAGS) @(TinyCLR_Defines->'-D%(filename)',' ')</CC_CPP_COMMON_FLAGS>

    <CC_CPP_COMMON_FLAGS>$(CC_CPP_COMMON_FLAGS) @(CC_CPP_Defines->'-D%(filename)',' ')</CC_CPP_COMMON_FLAGS>

    <CC_CPP_INCS>$(CC_CPP_INCS) -I$(CLRROOT)\$(Directory)</CC_CPP_INCS>
    <CC_CPP_INCS>$(CC_CPP_INCS) -I$(SPO_SDK)\DeviceCode\include</CC_CPP_INCS>
    <CC_CPP_INCS>$(CC_CPP_INCS) -I$(SPO_SDK)\DeviceCode\Cores\arm</CC_CPP_INCS>
    <CC_CPP_INCS>$(CC_CPP_INCS) -I$(SPO_SDK)\Support\Include  </CC_CPP_INCS>
    <CC_CPP_INCS>$(CC_CPP_INCS) -I$(SPO_SDK)\crypto\inc </CC_CPP_INCS>
    <CC_CPP_INCS>$(CC_CPP_INCS) -I$(SPO_SDK)\CLR\Include</CC_CPP_INCS>
    <CC_CPP_INCS>$(CC_CPP_INCS) -I$(SPO_SDK)\CLR\Libraries\CorLib</CC_CPP_INCS>
    <CC_CPP_INCS>$(CC_CPP_INCS) -I$(SPO_SDK)\CLR\Libraries\SPOT</CC_CPP_INCS>
    <CC_CPP_INCS>$(CC_CPP_INCS) -I$(SPO_SDK)\CLR\Libraries\SPOT_Hardware</CC_CPP_INCS>
    <CC_CPP_INCS>$(CC_CPP_INCS) -I$(SPO_SDK)\CLR\Libraries\SPOT_Graphics</CC_CPP_INCS>
    <CC_CPP_INCS>$(CC_CPP_INCS) -I$(SPO_SDK)\CLR\Libraries\SPOT_Net</CC_CPP_INCS>
    <CC_CPP_INCS>$(CC_CPP_INCS) -I$(SPO_SDK)\CLR\Libraries\SPOT_Net_Security</CC_CPP_INCS>
    <CC_CPP_INCS>$(CC_CPP_INCS) -I"$(ARMINC)"</CC_CPP_INCS>
    <CC_CPP_INCS>$(CC_CPP_INCS) @(IncludePaths->'-I$(CLRROOT)\%(relativedir)%(filename)',' ')</CC_CPP_INCS>
    <CC_CPP_INCS>$(CC_CPP_INCS) @(DirectIncludePaths->'-I%(FullPath)',' ')</CC_CPP_INCS>

    <CC_CPP_COMMON_FLAGS>$(CC_CPP_COMMON_FLAGS) $(AS_CC_CPP_COMMON_FLAGS) $(CC_CPP_TARGETTYPE_FLAGS) $(CC_CPP_INCS) $(ExtraFlags)</CC_CPP_COMMON_FLAGS>
  </PropertyGroup>

  <!-- CC flags -->
  <PropertyGroup>
    <CC_FLAGS>$(CC_FLAGS) $(CC_CPP_COMMON_FLAGS) $(ExtraCCFlags)</CC_FLAGS>
  </PropertyGroup>


  <!-- CPP flags -->
  <PropertyGroup>
    <CPP_FLAGS>$(CPP_FLAGS) $(CC_CPP_COMMON_FLAGS) $(ExtraCPPFlags)</CPP_FLAGS>
  </PropertyGroup>

<!-- other flags -->
  <PropertyGroup>
    <ARFLAGS>$(ARFLAGS) $(SWTC)create -c -r</ARFLAGS>

    <LINK_TARGETTYPE_FLAGS>$(LINK_TARGETTYPE_FLAGS) $(SWTC)debug</LINK_TARGETTYPE_FLAGS>
    <LINK_FLAGS>$(LINK_FLAGS) $(LINK_TARGETTYPE_FLAGS) $(SWTC)remove $(SWTC)unmangled $(SWTC)info sizes,totals,veneers,unused,libraries $(SWTC)map  $(SWTC)xref $(SWTC)symbols $(SWTC)callgraph</LINK_FLAGS>

    <LINK_FLAGS Condition="'$(COMPILER_TOOL_VERSION)' != 'ADS1.2'">$(LINK_FLAGS) $(SWTC)userlibpath $(LIB_DIR) $(SWTC)userlibpath $(PLATFORM_INDEPENDENT_LIB_DIR) $(ExtraLinkFlags)</LINK_FLAGS>

    <LINK_FLAGS Condition="'$(OutputType)'=='Executable' and '$(LINK_ENTRY_SET)'!='true'">$(LINK_FLAGS) $(SWTC)entry EntryPoint</LINK_FLAGS>

    <LINK_FLAGS Condition="'$(OutputType)'=='Executable' ">$(LINK_FLAGS) $(ExtraLinkFlags)</LINK_FLAGS>

    <SCATTER_FLAG Condition="'$(OutputType)'=='Executable'">$(SWTC)scatter</SCATTER_FLAG>

    <EXEName>$(BIN_DIR)\$(AssemblyName)</EXEName>

    <TargetRule Condition="'$(OutputType)'=='Library'"   >ArmBuildLib</TargetRule>
    <TargetRule Condition="'$(OutputType)'=='Executable'">BuildAXF</TargetRule>

  </PropertyGroup>


<!-- item group  -->

  <ItemGroup>
    <MakeAXFInputs Include="$(MakeAXFInputs)"/>
    <FastCompileFile Condition="'$(ENABLE_FASTCOMPILE)'=='true'" Include="@(FastCompileCFile)"/>
    <FastCompileFile Condition="'$(ENABLE_FASTCOMPILE)'=='true'" Include="@(FastCompileCPPFile)"/>
  </ItemGroup>


  <ItemGroup Condition="'$(OutputType)'=='Executable'">
    <EXEScatterFileDefinition Condition="'$(EXEScatterFileDefinition)'!=''" Include="$(EXEScatterFileDefinition)"/>

    <EXEScatterFile Include="$(BIN_DIR)\$(AssemblyName)_scatterfile.txt"/>
    <EXEIncludePaths Include="$(ARMINC)"/>
  </ItemGroup>


<!-- target group for compile,assembler,linker, librarian, loader -->


  <Target Name="ArmCompileCPP" Condition="'@(CPPFiles)'!='' or '@(FastCompileCPPFile)'!=''" Inputs="@(FastCompileCPPFile);@(CPPFiles);@(HFiles)" Outputs="@(ObjFiles)">
<!--
    <ADSCompileCPP Tool="WrappedTool="$(CPP)" InputFiles="@(CPPFiles->'%(FullPath)')" OutputPath="$(OBJ_DIR)" Flags="$(CPP_FLAGS) $(POS_DEPENDENT)" IncludePaths="@(IncludeDirs)"/>
-->
   <Exec Condition="Exists('%(FastCompileCPPFile.FullPath)') and '@(FastCompileCPPFile)'!='' and '$(ENABLE_FASTCOMPILE)'=='true'" Command="$(CPP) $(CPP_FLAGS) $(POS_DEPENDENT) -o $(OBJ_DIR)\%(FastCompileCPPFile.Filename).$(OBJ_EXT) -c %(FastCompileCPPFile.FullPath) "/>
   <Exec Condition="Exists('%(CPPFiles.FullPath)') and '@(CPPFiles)'!=''and ('$(ENABLE_FASTCOMPILE)'!='true' or '@(FastCompileCPPFile)'=='')" Command="$(CPP) $(CPP_FLAGS) $(POS_DEPENDENT) -o $(OBJ_DIR)\%(CPPFiles.Filename).$(OBJ_EXT) -c %(CPPFiles.FullPath)  "/>
  </Target>


  <Target Name="ArmCompileC" Condition="'@(CFiles)'!='' or '@(FastCompileCFile)'==''" Inputs="@(FastCompileCFile);@(CFiles);@(HFiles)" Outputs="@(CFiles->'$(OBJ_DIR)\%(filename).$(OBJ_EXT)')">
<!--
    <ADSCompileCC Tool="WrappedTool="$(CC)" InputFiles="@(CFiles->'%(FullPath)')" OutputPath="$(OBJ_DIR)" Flags="$(CC_FLAGS) $(POS_DEPENDENT)" IncludePaths="@(IncludeDirs)"/>
-->
    <Exec Condition="Exists('%(FastCompileCFile.FullPath)') and  '@(FastCompileCFile)'!='' and '$(ENABLE_FASTCOMPILE)'=='true'" Command="$(CC) $(CC_FLAGS) $(POS_DEPENDENT) -o$(OBJ_DIR)\%(FastCompileCFile.Filename).$(OBJ_EXT) -c %(FastCompileCFile.FullPath) "/>
    <Exec Condition="Exists('%(CFiles.FullPath)') and  '@(CFiles)'!=''and ('$(ENABLE_FASTCOMPILE)'!='true' or '@(FastCompileCFile)'=='')" Command="$(CC) $(CC_FLAGS) $(POS_DEPENDENT) -o$(OBJ_DIR)\%(CFiles.Filename).$(OBJ_EXT) -c %(CFiles.FullPath) "/>
  </Target>

  <Target Name="ArmAssemble" Condition="'@(AssemblyFiles)'!=''" Inputs="@(AssemblyFiles);@(HFiles)" Outputs="@(AssemblyFiles->'$(OBJ_DIR)\%(FileName).$(OBJ_EXT)')">
    <!-- has to delete the obj manually, as the armas won't delete the old one -->
    <Exec Condition="Exists('%(AssemblyFiles.FullPath)')" Command="del /q  $(OBJ_DIR)\%(AssemblyFiles.Filename).$(OBJ_EXT)" ContinueOnError="true" />
    <Exec Condition="Exists('%(AssemblyFiles.FullPath)')" Command="$(AS) $(AS_PLATFORM_FLAGS) $(AS_FLAGS) $(SWTC)LIST $(OBJ_DIR)\%(AssemblyFiles.Filename).txt $(SWTC)xref -o $(OBJ_DIR)\%(AssemblyFiles.Filename).$(OBJ_EXT) %(AssemblyFiles.FullPath)"/>
  </Target>

  <Target Name="DelBuildLib" Condition="'$(OutputType)'=='Library'" Inputs="@(FastCompileCPPFile);@(CPPFiles);@(FastCompileCFile);@(CFiles);@(AssemblyFiles);@(HFiles)" Outputs="@(TargetLib)">
    <Exec Condition="'@(FilesExist)'!='' " Command="del /q  @(TargetLib->'%(FullPath)', ' ')" ContinueOnError="true" />
    <Exec Condition="'@(FilesExist)'!='' " Command="del /q  @(TargetLib->'%(FullPath).manifest', ' ')" ContinueOnError="true" />
  </Target>

  <Target Name="ArmBuildLib" Condition="'$(OutputType)'=='Library'" DependsOnTargets="FindCompileFilesExistence;FindFastCompileFilesExistence;DelBuildLib;ArmCompileC;ArmCompileCPP;ArmAssemble;CreateLibManifest;$(ExtraTargets);" Inputs="@(ObjFiles);@(LIB_FIRSTENTRY_OBJ);@(OEM_TARGETS);@(OEM_TARGETS_OBJ);@(DriverLibs->'$(LIB_DIR)\%(FileName)%(Extension)',' ');@(PlatformIndependentLibs->'$(PLATFORM_INDEPENDENT_LIB_DIR)\%(FileName)%(Extension)')" Outputs="@(TargetLib);@(TargetLib->'%(FullPath).manifest')">
    <Exec WorkingDirectory="$(OBJ_DIR)" Condition="'@(FilesExist)'!='' " Command="$(AR) $(ARFLAGS) @(TargetLib) @(ObjFiles->'%(FileName)%(Extension)', ' ') @(LIB_FIRSTENTRY_OBJ,' ') @(OEM_TARGETS,' ') @(OEM_TARGETS_OBJ,' ') @(DriverLibs->'$(LIB_DIR)\%(FileName)%(Extension)',' ') @(PlatformIndependentLibs->'$(PLATFORM_INDEPENDENT_LIB_DIR)\%(FileName)%(Extension)', ' ')"/>
  </Target>

  <Target Name="BuildAXF" Condition="'$(OutputType)'=='Executable'" DependsOnTargets="ArmCompileCPP;ArmCompileC;ArmAssemble;$(ExtraEXETargets);BuildScatterfile;" Inputs="@(EXEInputs);@(InputLibs);@(PlatformIndependentLibs->'$(PLATFORM_INDEPENDENT_LIB_DIR)\%(FileName)%(Extension)');@(DriverLibs->'$(LIB_DIR)\%(FileName)%(Extension)');@(EXEScatterFile)" Outputs="@(EXEOutput)">
    <!-- Uncomment to print build inputs to the console
       <Message Text="~~~~BuildAXF Inputs: @(EXEInputs,' ') @(InputLibs,' ') @(DriverLibs,' ') @(EXEScatterFile,' ') @(PlatformIndependentLibs->'$(PLATFORM_INDEPENDENT_LIB_DIR)\%(FileName)%(Extension)',' ') @(DriverLibs->'$(LIB_DIR)\%(FileName)%(Extension)',' ')" />
    -->

    <!-- TOO MANY INPUTS FOR LINKER/COMMAND WINDOW, SO BREAK THE LINKER STAGE UP BY ARCHIVING ALL DRIVER FILES INTO ONE LIB THEN LINKING CLR LIBS AND COMBINED DRIVER LIB -->
    <Exec WorkingDirectory="$(PLATFORM_INDEPENDENT_LIB_DIR)" Command="$(AR) $(ARFLAGS) $(LIB_DIR)\tmp_$(AssemblyName).$(LIB_EXT) @(PlatformIndependentLibs->'%(FileName)%(Extension)',' ')"/>
    <Exec Command="$(LINK) $(LINK_FLAGS) $(SWTC)symdefs $(EXEName).symdefs $(SWTC)list $(EXEName).map $(SWTC)output @(EXEOutput) $(SCATTER_FLAG) @(EXEScatterFile,' ') @(EXEInputs,' ') @(InputLibs,' ') @(DriverLibs, ' ') $(LIB_DIR)\tmp_$(AssemblyName).$(LIB_EXT)" />
    <Exec Command="del /q $(LIB_DIR)\tmp_$(AssemblyName).$(LIB_EXT)"/>
    <Exec Command="$(FROMELF) $(FROMELF_FLAGS) $(SWTC)text -o $(EXEName).axfdump @(EXEOutput)" />
    <Exec Command="$(FROMELF) $(FROMELF_FLAGS) $(SWTC)bin  -o $(EXEName).bin     @(EXEOutput)" />
    <Exec Command="$(FROMELF) $(FROMELF_FLAGS) $(SWTC)m32  -o $(EXEName).hex     @(EXEOutput)" />
    <!-- generating intel hex fromat -->
    <Exec  Condition="$(IntelHexFormat)=='true'" Command="$(FROMELF) $(FROMELF_FLAGS) $(SWTC)i32  -o $(EXEName).ihex     @(EXEOutput)" />

    <!--     echo adding LOAD_IMAGE_CRC value to $*.symdefs -->
    <Exec Condition="'$(ADD_LOAD_IMAGE_CRC)'=='true'" Command="$(TOOLS_DIR)\BuildHelper -hashBuild $(EXEName).bin$(ImageLocation) $(EXEName).symdefs" />

    <Exec Condition="'$(AssemblyName)'=='TinyCLR'"    Command="copy /Y $(BIN_DIR)\$(AssemblyName)_$(TARGETPLATFORM)_$(TARGETLOCATION)_$(FLAVOR)_$(COMPILER_TOOL_VERSION).feedback $(SPO_SDK)\tools\make\Feedback\$(TARGETPLATFORM)_$(COMPILER_TOOL_VERSION).feedback" ContinueOnError="true"/>
    <Exec Condition="'$(AssemblyName)'=='TinyBooter'" Command="copy /Y $(BIN_DIR)\$(AssemblyName)_$(TARGETPLATFORM)_$(TARGETLOCATION)_$(FLAVOR)_$(COMPILER_TOOL_VERSION).feedback $(SPO_SDK)\tools\make\Feedback\$(TARGETPLATFORM)_$(COMPILER_TOOL_VERSION)_loader.feedback" ContinueOnError="true"/>
  </Target>

  <Target Name="FindBinFilesForSig">
    <!-- create signature files-->
    <CreateItem
            Include="$(EXEName).bin\*"
            AdditionalMetadata="OutputDir=$(EXEName).hex\" >
           <Output
               TaskParameter="Include"
               ItemName="SigFilesInHexDir"/>
    </CreateItem>

    <CreateItem
            Include="$(EXEName).bin"
            Condition="'@(SigFilesInHexDir)'==''"
            AdditionalMetadata="OutputDir=$(BIN_DIR)\" >
           <Output
               TaskParameter="Include"
               ItemName="SigFiles"/>
    </CreateItem>

    <CreateItem
            Include="@(SigFilesInHexDir);@(SigFiles)">
           <Output
               TaskParameter="Include"
               ItemName="AllSigFiles"/>
    </CreateItem>

    <Exec Command="del /q $(EXEName).sig"       Condition="Exists('$(EXEName).sig')" ContinueOnError="true"/>
    <Exec Command="del /q $(EXEName).hex\*.sig" Condition="'@(SigFilesInHexDir)'!=''"   ContinueOnError="true"/>

    <Message Text="file selected @(SigFilesInHexDir)"/>
    <Message Text="file selected @(SigFiles)"/>
    <Message Text="file selected @(AllSigFiles)"/>


  </Target>

  <Target Name="CompressBin" Inputs="@(CompressBinAsm);@(CompressBinFile);@(CompressBinFile->'%(RootDir)%(Directory)%(FileName).symdefs')" Outputs="@(CompressBinOutput);@(CompressBinComp)" >
    <Message Text="Compressing @(CompressBinFile)"/>
    <Exec Command="$(TOOLS_DIR)\buildhelper -symdef @(CompressBinFile->'%(RootDir)%(Directory)%(FileName).symdefs') EntryPoint -compress @(CompressBinFile) @(CompressBinComp)"/>
    <Exec Command="$(AS) $(AS_FLAGS) -I$(OBJ_DIR) $(POS_DEPENDENT) $(SWTC)list @(CompressBinOutput->'%(RootDir)%(Directory)%(FileName).txt') $(SWTC)xref -o @(CompressBinOutput) @(CompressBinAsm)"/>
    <Exec Command="del /q @(CompressBinFile->'%(RootDir)%(Directory)%(FileName).hex')" ContinueOnError="true"/>
  </Target>

  <Target Name="BuildSigFiles"
            Inputs="@(AllSigFiles)"
            Outputs="@(AllSigFiles->'%(OutputDir)%(FileName).sig')"
            DependsOnTargets="FindBinFilesForSig"
            Condition="EXISTS('$(SPO_SDK)\crypto\lib\x86\dll\crypto.dll')">

    <Message Text="Create Signature files for @(AllSigFiles)"/>
    <Exec Command="$(PRG_MMP) -sign_file %(RelativeDir)%(AllSigFiles.Filename)%(Extension) $(SPO_SDK)\tools\bin\tinybooter_private_key.bin %(AllSigFiles.Outputdir)%(AllSigFiles.Filename).sig"/>
  </Target>

  <ItemGroup>
    <BuildScatterFileProperties Include="SPOCLIENT=$(SPOCLIENT)" />
    <BuildScatterFileProperties Include="PROFILE_BUILD=$(TRUE)" Condition="'$(sampleprof)'=='true'" />
    <BuildScatterFileProperties Include="PLATFORM=$(PLATFORM)" />
    <BuildScatterFileProperties Include="TARGETCODEBASE=$(TARGETCODEBASE)" />
    <BuildScatterFileProperties Include="TARGETCODEBASETYPE=$(TARGETCODEBASETYPE)" />
    <BuildScatterFileProperties Include="TARGETPLATFORM=$(TARGETPLATFORM)" />
    <BuildScatterFileProperties Include="TARGETLOCATION=$(TARGETLOCATION)" />
    <BuildScatterFileProperties Include="TARGETTYPE=$(FLAVOR)" />
    <BuildScatterFileProperties Include="TARGETPROCESSOR=$(TARGETPROCESSOR)" />
    <BuildScatterFileProperties Include="ALTERNATEFLASHLOCATION=$(ALTERNATEFLASHLOCATION)" />
    <BuildScatterFileProperties Include="COMPILER_TOOL_VERSION=$(COMPILER_TOOL_VERSION)" />
    <BuildScatterFileProperties Include="COMPILER_TOOL=$(COMPILER_TOOL)" />
    <BuildScatterFileProperties Include="PROFILE_BUILD=$TRUE" Condition="'$(FLAVOR)'=='Instrumented'" />
  </ItemGroup>

  <Target Name="BuildScatterfile" Condition="'$(DEPEND)'!='ACTIVE'" Inputs="@(EXEScatterFileDefinition);@(ScatterFileReferences)" Outputs="@(EXEScatterFile)">
    <Message Text="..."/>
    <ProcessScatterFile
    	Properties="@(BuildScatterFileProperties)"
		DefinitionFile="@(EXEScatterfileDefinition)"
		OutputFile="@(EXEScatterFile)"
    	/>
  </Target>

  <Target Name="TinyClrDat" Inputs="$(BIN_DIR)\tinyclr.dat;$(AS_SUBDIR)\tinyclr_dat.s" Outputs="$(OBJ_DIR)\tinyclr_dat.$(OBJ_EXT)">
    <Message                               Text="***************************************************************************************************"/>
    <Message Text="Target: TinyClrDat with outputs $(OBJ_DIR)\tinyclr_dat.$(OBJ_EXT)"/>
    <Message Condition="'$(FORCEDAT)'!=''" Text="Building Tinyclr.dat from $(BUILD_TREE_CLIENT)\dat\$(ENDIANNESS)\tinyclr_$(FORCEDAT).dat"/>
    <Message Condition="'$(FORCEDAT)'==''" Text="Building Tinyclr.dat from the features specified in the tinyclr.proj file"/>
    <Exec Condition="'$(FORCEDAT)'!='' AND EXISTS('$(BUILD_TREE_CLIENT)\dat\$(ENDIANNESS)\tinyclr_$(FORCEDAT).dat')" Command="copy /y $(BUILD_TREE_CLIENT)\dat\$(ENDIANNESS)\tinyclr_$(FORCEDAT).dat $(BIN_DIR)\tinyclr.dat" />
    <Exec Command="$(ADS_WRAPPER) $(AS) -I$(BIN_DIR) $(AS_FLAGS) $(POS_DEPENDENT) $(SWTC)LIST $(OBJ_DIR)\tinyclr_dat.txt $(SWTC)xref -o $(OBJ_DIR)\tinyclr_dat.$(OBJ_EXT) $(AS_SUBDIR)\tinyclr_dat.s"/>
    <Message                               Text="========== Database file content:"/>    
    <Exec Command="$(PRG_MMP) -dump_dat $(BIN_DIR)\tinyclr.dat" />
    <Message                               Text="========== End of Database file content"/>    
    <Message                               Text="***************************************************************************************************"/>
    <Exec Command="copy /BVY $(BIN_DIR)\tinyclr.dat $(BIN_DIR)\tinyclr.dat.fromlastbuildrun" />
    <Exec Command="del  /Q /F $(BIN_DIR)\tinyclr.dat"/>
  </Target>

</Project>

