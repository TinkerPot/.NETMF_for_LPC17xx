//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     .NET Micro Framework MFSvcUtil.Exe
//     Runtime Version:2.0.00001.0001
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Xml;
using System.Ext;
using System.Ext.Xml;
using Ws.ServiceModel;
using Ws.Services.Mtom;
using Ws.Services.Serialization;
using XmlElement = Ws.Services.Xml.WsXmlNode;
using XmlAttribute = Ws.Services.Xml.WsXmlAttribute;
using XmlConvert = Ws.Services.Serialization.WsXmlConvert;

namespace schemas.example.org.AttachmentService
{
    
    
    [DataContract(Namespace="http://schemas.example.org/AttachmentService")]
    public class OneWayAttachmentRequest
    {
        
        [DataMember(Order=0, IsNillable=true)]
        public byte[] Param;
        
        [DataMember(IsNillable=true, IsRequired=false)]
        public XmlElement[] Any;
        
        [DataMember(IsNillable=true, IsRequired=false)]
        public XmlAttribute[] AnyAttr;
    }
    
    public class OneWayAttachmentRequestDataContractSerializer : DataContractSerializer
    {
        
        public OneWayAttachmentRequestDataContractSerializer(string rootName, string rootNameSpace) : 
                base(rootName, rootNameSpace)
        {
        }
        
        public OneWayAttachmentRequestDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) : 
                base(rootName, rootNameSpace, localNameSpace)
        {
        }
        
        public override object ReadObject(XmlReader reader)
        {
            OneWayAttachmentRequest OneWayAttachmentRequestField = null;
            if (IsParentStartElement(reader, false, true))
            {
                OneWayAttachmentRequestField = new OneWayAttachmentRequest();
                OneWayAttachmentRequestField.AnyAttr = ReadAnyAttribute(reader);
                reader.Read();
                if (IsChildStartElement(reader, "Param", true, true))
                {
                    reader.Read();
                    if (IsAttribute(reader, "href"))
                    {
                        string contentID;
                        contentID = reader.Value;
                        reader.MoveToElement();
                        reader.ReadStartElement("Include", "http://www.w3.org/2004/08/xop/include");
                        reader.ReadEndElement();
                        OneWayAttachmentRequestField.Param = GetBodyPartContent(contentID, BodyParts);
                    }
                    else
                    {
                        OneWayAttachmentRequestField.Param = Convert.FromBase64String(reader.ReadString());
                        reader.ReadEndElement();
                    }
                }
                OneWayAttachmentRequestField.Any = ReadAnyElement(reader, false);
                reader.ReadEndElement();
            }
            return OneWayAttachmentRequestField;
        }
        
        public override void WriteObject(XmlWriter writer, object graph)
        {
            OneWayAttachmentRequest OneWayAttachmentRequestField = ((OneWayAttachmentRequest)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                WriteAnyAttribute(writer, OneWayAttachmentRequestField.AnyAttr);
                if (WriteChildElement(writer, "Param", true, true, OneWayAttachmentRequestField.Param))
                {
                    BodyParts.Add(CreateNewBodyPart(OneWayAttachmentRequestField.Param, "<1@body>"));
                    writer.WriteStartElement("xop", "Include", "http://www.w3.org/2004/08/xop/include");
                    writer.WriteAttributeString(null, "href", null, "cid:1@body");
                    writer.WriteEndElement();
                    writer.WriteEndElement();
                }
                WriteAnyElement(writer, OneWayAttachmentRequestField.Any, false);
                writer.WriteEndElement();
            }
            return;
        }
    }
    
    [DataContract(Namespace="http://schemas.example.org/AttachmentService")]
    public class TwoWayAttachmentRequest
    {
        
        [DataMember(Order=0, IsNillable=true)]
        public byte[] Param;
        
        [DataMember(IsNillable=true, IsRequired=false)]
        public XmlElement[] Any;
        
        [DataMember(IsNillable=true, IsRequired=false)]
        public XmlAttribute[] AnyAttr;
    }
    
    public class TwoWayAttachmentRequestDataContractSerializer : DataContractSerializer
    {
        
        public TwoWayAttachmentRequestDataContractSerializer(string rootName, string rootNameSpace) : 
                base(rootName, rootNameSpace)
        {
        }
        
        public TwoWayAttachmentRequestDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) : 
                base(rootName, rootNameSpace, localNameSpace)
        {
        }
        
        public override object ReadObject(XmlReader reader)
        {
            TwoWayAttachmentRequest TwoWayAttachmentRequestField = null;
            if (IsParentStartElement(reader, false, true))
            {
                TwoWayAttachmentRequestField = new TwoWayAttachmentRequest();
                TwoWayAttachmentRequestField.AnyAttr = ReadAnyAttribute(reader);
                reader.Read();
                if (IsChildStartElement(reader, "Param", true, true))
                {
                    reader.Read();
                    if (IsAttribute(reader, "href"))
                    {
                        string contentID;
                        contentID = reader.Value;
                        reader.MoveToElement();
                        reader.ReadStartElement("Include", "http://www.w3.org/2004/08/xop/include");
                        reader.ReadEndElement();
                        TwoWayAttachmentRequestField.Param = GetBodyPartContent(contentID, BodyParts);
                    }
                    else
                    {
                        TwoWayAttachmentRequestField.Param = Convert.FromBase64String(reader.ReadString());
                        reader.ReadEndElement();
                    }
                }
                TwoWayAttachmentRequestField.Any = ReadAnyElement(reader, false);
                reader.ReadEndElement();
            }
            return TwoWayAttachmentRequestField;
        }
        
        public override void WriteObject(XmlWriter writer, object graph)
        {
            TwoWayAttachmentRequest TwoWayAttachmentRequestField = ((TwoWayAttachmentRequest)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                WriteAnyAttribute(writer, TwoWayAttachmentRequestField.AnyAttr);
                if (WriteChildElement(writer, "Param", true, true, TwoWayAttachmentRequestField.Param))
                {
                    BodyParts.Add(CreateNewBodyPart(TwoWayAttachmentRequestField.Param, "<2@body>"));
                    writer.WriteStartElement("xop", "Include", "http://www.w3.org/2004/08/xop/include");
                    writer.WriteAttributeString(null, "href", null, "cid:2@body");
                    writer.WriteEndElement();
                    writer.WriteEndElement();
                }
                WriteAnyElement(writer, TwoWayAttachmentRequestField.Any, false);
                writer.WriteEndElement();
            }
            return;
        }
    }
    
    [DataContract(Namespace="http://schemas.example.org/AttachmentService")]
    public class TwoWayAttachmentResponse
    {
        
        [DataMember(Order=0, IsNillable=true)]
        public byte[] Param;
        
        [DataMember(IsNillable=true, IsRequired=false)]
        public XmlElement[] Any;
        
        [DataMember(IsNillable=true, IsRequired=false)]
        public XmlAttribute[] AnyAttr;
    }
    
    public class TwoWayAttachmentResponseDataContractSerializer : DataContractSerializer
    {
        
        public TwoWayAttachmentResponseDataContractSerializer(string rootName, string rootNameSpace) : 
                base(rootName, rootNameSpace)
        {
        }
        
        public TwoWayAttachmentResponseDataContractSerializer(string rootName, string rootNameSpace, string localNameSpace) : 
                base(rootName, rootNameSpace, localNameSpace)
        {
        }
        
        public override object ReadObject(XmlReader reader)
        {
            TwoWayAttachmentResponse TwoWayAttachmentResponseField = null;
            if (IsParentStartElement(reader, false, true))
            {
                TwoWayAttachmentResponseField = new TwoWayAttachmentResponse();
                TwoWayAttachmentResponseField.AnyAttr = ReadAnyAttribute(reader);
                reader.Read();
                if (IsChildStartElement(reader, "Param", true, true))
                {
                    reader.Read();
                    if (IsAttribute(reader, "href"))
                    {
                        string contentID;
                        contentID = reader.Value;
                        reader.MoveToElement();
                        reader.ReadStartElement("Include", "http://www.w3.org/2004/08/xop/include");
                        reader.ReadEndElement();
                        TwoWayAttachmentResponseField.Param = GetBodyPartContent(contentID, BodyParts);
                    }
                    else
                    {
                        TwoWayAttachmentResponseField.Param = Convert.FromBase64String(reader.ReadString());
                        reader.ReadEndElement();
                    }
                }
                TwoWayAttachmentResponseField.Any = ReadAnyElement(reader, false);
                reader.ReadEndElement();
            }
            return TwoWayAttachmentResponseField;
        }
        
        public override void WriteObject(XmlWriter writer, object graph)
        {
            TwoWayAttachmentResponse TwoWayAttachmentResponseField = ((TwoWayAttachmentResponse)(graph));
            if (WriteParentElement(writer, true, true, graph))
            {
                WriteAnyAttribute(writer, TwoWayAttachmentResponseField.AnyAttr);
                if (WriteChildElement(writer, "Param", true, true, TwoWayAttachmentResponseField.Param))
                {
                    BodyParts.Add(CreateNewBodyPart(TwoWayAttachmentResponseField.Param, "<3@body>"));
                    writer.WriteStartElement("xop", "Include", "http://www.w3.org/2004/08/xop/include");
                    writer.WriteAttributeString(null, "href", null, "cid:3@body");
                    writer.WriteEndElement();
                    writer.WriteEndElement();
                }
                WriteAnyElement(writer, TwoWayAttachmentResponseField.Any, false);
                writer.WriteEndElement();
            }
            return;
        }
    }
    
    [ServiceContract(Namespace="http://schemas.example.org/AttachmentService")]
    [PolicyAssertion(Namespace="http://schemas.xmlsoap.org/ws/2006/02/devprof", Name="profile", PolicyID="AttachmentServicePolicy")]
    [PolicyAssertion(Namespace="http://schemas.xmlsoap.org/ws/2004/09/policy/optimizedmimeserialization", Name="OptimizedMimeSerialization", PolicyID="AttachmentServicePolicy")]
    public interface IAttachmentService
    {
        
        [OperationContract(Action="http://schemas.example.org/AttachmentService/OneWayAttachment", IsOneWay=true)]
        void OneWayAttachment(OneWayAttachmentRequest req);
        
        [OperationContract(Action="http://schemas.example.org/AttachmentService/TwoWayAttachment")]
        TwoWayAttachmentResponse TwoWayAttachment(TwoWayAttachmentRequest req);
    }
}
