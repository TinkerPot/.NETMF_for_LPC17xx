////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 
// 
// This file is part of the Microsoft .NET Micro Framework Porting Kit Code Samples and is unsupported. 
// Copyright (C) Microsoft Corporation. All rights reserved. Use of this sample source code is subject to 
// the terms of the Microsoft license agreement under which you licensed this sample source code. 
// 
// THIS SAMPLE CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, 
// INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
// 
// 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <tinyhal.h>

//--//

//#define SH7619_EDMAC_INT                   MC9328MXL_GPIO::c_Port_A_06
#define SH7619_EDMAC_INT                   0
//#define SH7619_EDMAC_CS                    MC9328MXL_GPIO::c_Port_A_04
#define SH7619_EDMAC_CS                    0
#define SH7619_EDMAC_CS_ACTIVE             FALSE
#define SH7619_EDMAC_MSK_IDLE              FALSE
#define SH7619_EDMAC_MSK_SAMPLE_EDGE       TRUE
#define SH7619_EDMAC_16BIT_OP              FALSE
#define SH7619_EDMAC_CLOCK_RATE_KHZ        25000
#define SH7619_EDMAC_CS_SETUP_USEC         0
#define SH7619_EDMAC_CS_HOLD_USEC          0
#define SH7619_EDMAC_MODULE                0


//--//

// SH7619_EDMAC_DEVICE_CONFIG g_SH7619_EDMAC_Config =
// {
    // {
        // {                                   // SH7619_EDMAC_DRIVER_CONFIG
            // {                               // SPI_CONFIGURATION
                // SH7619_EDMAC_CS,
                // SH7619_EDMAC_CS_ACTIVE,
                // SH7619_EDMAC_MSK_IDLE,
                // SH7619_EDMAC_MSK_SAMPLE_EDGE,
                // SH7619_EDMAC_16BIT_OP,
                // SH7619_EDMAC_CLOCK_RATE_KHZ,
                // SH7619_EDMAC_CS_SETUP_USEC,
                // SH7619_EDMAC_CS_HOLD_USEC,
                // SH7619_EDMAC_MODULE,
            // },
            
            // SH7619_EDMAC_INT,                    // Interrupt Pin
        // },
    // }
// };

NETWORK_CONFIG g_NetworkConfig =
{
    { TRUE },
    1,      // interface count
    {       
        {                                      
#if 0
            0,
            SOCK_MAKE_IP_ADDR(157,60,  250,189), /*ip address */  
            SOCK_MAKE_IP_ADDR(255,255, 254,  0), /*subnet mask*/  
            SOCK_MAKE_IP_ADDR(157,60,  250,  1), /*gateway    */  
            SOCK_MAKE_IP_ADDR(  0,  0,  0,  0), /*dns1       */  
            SOCK_MAKE_IP_ADDR(  0,  0,  0,  0), /*dns2       */  
#else           
            SOCK_NETWORKCONFIGURATION_FLAGS_DHCP,
            SOCK_MAKE_IP_ADDR(  0,  0,  0,  0), /*ip address */  
            SOCK_MAKE_IP_ADDR(255,255,255,  0), /*subnet mask*/  
            SOCK_MAKE_IP_ADDR(  0,  0,  0,  0), /*gateway    */  
            SOCK_MAKE_IP_ADDR(  0,  0,  0,  0), /*dns1       */  
            SOCK_MAKE_IP_ADDR(  0,  0,  0,  0), /*dns2       */  
#endif
            
            SOCK_NETWORKCONFIGURATION_INTERFACETYPE_ETHERNET,        
            6,              /*mac address length*/                  
            {               /*mac address*/                         
//                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 

                0x1A, 0x0E, 0x0F, 0xF8, 0x06, 0xF3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
            }                                                       
        },                                                          
    },
};

WIRELESS_CONFIG g_WirelessConfig = 
{
    /// This is a sample only.
    { TRUE },
    1,
    {
        {
            WIRELESS_FLAG_AUTHENTICATION__set(WIRELESS_FLAG_AUTHENTICATION_EAP)              |
            WIRELESS_FLAG_ENCRYPTION__set    (WIRELESS_FLAG_ENCRYPTION_WPA)                  |
            WIRELESS_FLAG_RADIO__set         (WIRELESS_FLAG_RADIO_b | WIRELESS_FLAG_RADIO_g),
            
            {
                'P','A','S','S','P','H','R','A','S','E','\0',
            },
            8,
            { 
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
            },
            0,
            {
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
            },
            {
                'S','S','I','D','_','1','\0',
            },
        },
    },
};





